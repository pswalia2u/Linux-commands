packer build <json/hcl conifg file>
packer build -debug <json/hcl conifg file>
packer -var <variable=value>

#Packer format
packer fmt <unformatted hcl config>
packer validate <config file>

packer hcl2_upgrade <json config>

#packer env vars
PACKER_LOG #enables packer logs
PACKER_LOG_PATH #spcifes file path for storing log file

#hcl comments
//
#
/* <> */


vagrant status

vagrant box list
vagrant box outdated
vagrant box update
vagrant box remove <box>
vagrant box add <box_path>

vagrant plugin list
vagrant plugin update
vagrant plugin uninstall <pluin>

vagrant package --output <centos.box>  # run this after making changes, this is similar to creating images in docker
vagrant package --base <vm_name>

export VAGRANT_HOME=F:\\.vagrant.d
VAGRANT_DEFAULT_PROVIDER=vmware_desktop

#Provision
vagrant provision
vagrant powershell

cfg.vm.provision "shell", path: "scripts/fix-second-network.ps1", privileged: false, args: "-ip 192.168.38.4 -dns 192.168.38.2"

vagrant up

-----------------------------------------------------------------------------------------------------------------------------
Terraform

terraform init(Run as new provider is added)
terraform plan
terraform apply(applies the desired state either by replacing the resource or modifying it)
terraform apply -auto-approve
terraform destroy 
terraform destroy -target aws_instance.myec2
We can comment out the resoursce and then run terraform apply/plan to delete the resource as well.

terraform state files contains info regarding running 

terraform refresh (Updates the terraform state file according to the current running state)

terrafor attributes and output:

To output specific attribute:
output "publicip" {
  value=aws_instance.<instance_name>.<attribute_name>
} 

To output all the attributes:
output "publicip" {
  value=aws_instance.myec2
}

-----------------------------------------------
Terraform variables:
First approach:
1) Create a variables.tf file in same directory
2) paste the below in file:
variable "vpn_ip" {
  default = "192.0.0.5/32"
}
3) Then we can use variable using below syntax: 
var.vpn_ip

Second approach:
1) We can also specify variables on command line:
terraform plan -var="instancetype=t2.small"

Third approach:
1) Create 2 files "variables.tf" and "terraform.tfvars"
2) variables.tf contents:
variable "instancetype" {}
3) terraform.tfvars contents:
instancetype="t2.micro"

Forth approach: 
1) custom.tfvars file with contents
instancetype="t2.micro"
2) terraform plan -var-file="custom.tfvars"

Fifth approach:
1) Creating environment variables 
setx TF_var_instancetype t2.micro

Data type of terraform variables:

--------------------------------------------
Terraform count parameter:

Allows us to create same resource mutiple times without specifying resource block multiple times.

Option 1
count = 2 (specify count variable within resource)


(concat index with other vlaues)
name = "instance_${count.index}"


(Creating a list variable rather thn concatanating index)
variable "elb_names"{
  type = list
  default = ["dev-loadbalancer","prod-loadbalancer","stage-loadbalancer"]
}

name= var.elb_names[coun.index]
count = 3

---------------------------------------------
condition ? true_val : false_val

---------------------------------------------
Terrform functions

---------------------------------------------
Data source(Can be used to fetch ami ids for instances of specified regions) eg

terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 3.0"
    }
  }
}

provider "aws" {
  region     = "us-west-2"
  access_key = "AKIA4SM4ZEUH5UFHLBGS"
  secret_key = "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"
}

data "aws_ami" "app_ami" {
  most_recent = true
  owners = ["amazon"]

  filter {
   name = "name"
   values = ["amzn2-ami-hvm*"]
  }
}

resource "aws_instance" "myec2" {
   ami = data.aws_ami.app_ami.id
   instance_type = t2.micro
}

-------------------------------------------------
Terraform debugging:

set TF_LOG env vriable with either one of these values(TACE,DEBUG,INFO,WARN,ERROR)

-----------------------------------------------
terraform format:
terraform fmt # maes code more readable

-----------------------------------------------
terraform validate # Tells syntax errors


-----------------------------------------------
Dynamic blocks-
variable "ingress_ports" {
  type = list(number)
  description = "list of ingress ports"
  default = [8200, 8201, 8300, 9200, 9500]
}

resource "aws_security_group" "dyanmicssg" {
  name = "dynamics-sg"
  description = "Ingress"
}

dynamic "ingress" {
  for_each = var.ingress_ports # ingress_ports is avar of type list containing ports
  content {
    from_port = ingress.value
    to_port = ingress.value
    protocol= tcp
    cidr_blocks ["0.0.0.0/0"]
  }
}

